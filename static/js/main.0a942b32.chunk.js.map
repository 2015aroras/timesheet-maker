{"version":3,"sources":["Utils.tsx","store/TimeSheetStore.tsx","DayOfWeek.tsx","state/TimeSheetState.tsx","pages/Home.tsx","cells/TimeCell.tsx","cells/NumberCell.tsx","cells/DayOfWeekCell.tsx","state/TimeSheetReducer.tsx","cells/CheckBoxCell.tsx","DayColumn.tsx","TimeTable.tsx","TimeSheet.tsx","pages/TimeSheetPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["areEqual","date","otherDate","toISOString","includes","dates","queryDate","some","parseJson","jsonString","JSON","parse","key","value","toLowerCase","endsWith","Date","startOfWeek","addTime","getDay","setHours","setMinutes","setSeconds","setMilliseconds","timeFromDate","hours","minutes","seconds","time","days","getTime","toReadableDateString","includeYear","yearSuffix","getFullYear","getDate","getMonth","toReadableWeekString","startOfWeekDate","timeSheetDatesKey","getSavedTimeSheetDates","savedDatesString","localStorage","getItem","map","dateString","setSavedTimeSheetDates","forEach","validateIsStartOfWeekDate","setItem","stringify","addSavedTimeSheetDate","savedDates","deleteSavedTimeSheetDate","filter","savedDate","saveTimeSheetToLocalStorage","state","loadTimeSheetFromLocalStorage","localStateString","deleteTimeSheetFromLocalStorage","existsTimeSheetInLocalStorage","removeItem","Error","DayOfWeek","daysOfWeek","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","initialState","weekStartDate","timeTablePropsMap","initialTimeTableProps","props","personName","personPos","timeTablePos","dayColumnsProps","reduce","dow","startTime","endTime","isDayOff","breaksLength","initialDayColumnProps","cloneTimeTablePropsWithNewDate","newDate","getHours","getMinutes","getSeconds","cloneDayColumnPropsWithNewDate","noTemplateTimeSheetValue","Home","useState","now","setDate","isAddedTimeSheet","setIsAddedTimeSheet","templateTimeSheetWeek","setTemplateTimeSheetWeek","to","onSubmit","evt","event","addTimeSheetDate","timeSheetDates","preventDefault","validateTimeSheetWeek","alert","templateStartOfWeekDate","getStartDateFromTimeSheetWeek","templateTimeSheetState","copiedPropsMapWithNewDate","cloneStateWithNewDate","addTimeSheet","htmlFor","name","type","dateToInputValue","onChange","inputDate","target","valueAsDate","getTimezoneOffset","onDateChange","selectedDateString","onTemplateTimeSheetWeekChange","timeSheetDate","year","toString","month","padStart","dayOfMonth","timeSheetWeek","matchingDates","length","TimeCell","className","min","max","step","timeToInputValue","placeholder","inputTime","newTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","onTimeChange","updateTimeFromInput","handleChangeFunction","undefined","onNumberChange","valueAsNumber","readOnly","NumberCell","number","DayOfWeekCell","TimeSheetActionType","useTimeSheetReducer","useReducer","action","dispatch","useEffect","localState","newState","SetState","Object","keys","person","ResetTimeTableOrder","loadStateFromStorage","StartTimeUpdate","EndTimeUpdate","BreaksLengthUpdate","IsDayOffUpdate","updateValue","AddTimeTable","newPersonPos","updatedState","cloneDeep","addTimeTable","DeleteTimeTable","console","log","moveTimeTableDown","deleteTimetable","i","resetTimeTableOrder","MoveTimeTableUp","timeTablePosition","moveTimeTableAtPositionUp","moveTimeTableUp","MoveTimeTableDown","dayColumn","updatedDayColumn","Number","isInteger","timeTableCount","timeTableAtPos","getTimeTableAtPos","timeTableAbove","timeTablesAtPos","values","timeTableProp","CheckBoxCell","onCheckedChange","isChecked","checked","getTotalHoursWorking","handleChange","timeSheetContext","actionType","newValue","GetDayColumn","useContext","TimeSheetContext","dayOfWeekCell","checkBoxCell","newIsChecked","handleIsDayOffChange","React","Children","toArray","handleStartTimeChange","handleEndTimeChange","newNumber","handleBreaksLengthChange","headerRowName","bodyRowNames","getTotalHoursWorkingInWeek","hoursSoFar","hoursToday","TimeTable","array","dayColumnsElements","transposedDayColumnsElements","_","colIndex","row","bodyRows","rowName","rowNum","transposedDayColumnElements","scope","onClick","context","window","confirm","colSpan","cell","createContext","getAllPeopleTotalHoursWorking","TimeSheet","isDeletedTimeSheetDate","addPersonValue","setAddPersonValue","addPersonInputRef","useRef","Provider","disabled","saveTimeSheet","deleteTimeSheetDate","deleteTimeSheet","current","focus","ref","sort","timeTable","other","createElement","TimeSheetPage","pageParams","useParams","setTimeSheetDates","App","basename","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a942b32.chunk.js","sourcesContent":["function areEqual(date: Date, otherDate: Date): boolean {\n  return date.toISOString() === otherDate.toISOString()\n}\n\nfunction includes(dates: Date[], queryDate: Date): boolean {\n  return dates.some(date => areEqual(date, queryDate))\n}\n\nfunction parseJson<T>(jsonString: string): T {\n  return JSON.parse(jsonString, (key, value) => {\n    if (key.toLowerCase().endsWith('date') || key.toLowerCase().endsWith('time')) {\n      return new Date(value)\n    }\n    return value\n  })\n}\n\nfunction startOfWeek(date: Date): Date {\n  let startOfWeek = addTime(date, - date.getDay())\n  startOfWeek.setHours(0)\n  startOfWeek.setMinutes(0)\n  startOfWeek.setSeconds(0)\n  startOfWeek.setMilliseconds(0)\n  return startOfWeek\n}\n\nfunction timeFromDate(date: Date, hours: number, minutes: number, seconds: number): Date {\n  let time: Date = new Date(date)\n  time.setHours(hours)\n  time.setMinutes(minutes)\n  time.setSeconds(seconds)\n  time.setMilliseconds(0)\n  return time\n}\n\nfunction addTime(date: Date, days?: number, hours?: number,\n    minutes?: number, seconds?: number): Date {\n  return new Date(date.getTime()\n    + (days ?? 0) * 24 * 60 * 60 * 1000 \n    + (hours ?? 0) * 60 * 60 * 1000\n    + (minutes ?? 0) * 60 * 1000\n    + (seconds ?? 0) * 1000\n  )\n}\n\nfunction toReadableDateString(date: Date, includeYear=false): string {\n  const yearSuffix = includeYear ? `/${date.getFullYear()}` : ''\n  return `${date.getDate()}/${date.getMonth() + 1}` + yearSuffix\n}\n\nfunction toReadableWeekString(date: Date, includeYear=false): string {\n  const startOfWeekDate = startOfWeek(date)\n  return `${toReadableDateString(startOfWeekDate, includeYear)} – ${toReadableDateString(addTime(startOfWeekDate, 7), includeYear)}`\n}\n\nexport {\n  areEqual,\n  includes,\n  parseJson,\n  startOfWeek,\n  timeFromDate,\n  addTime,\n  toReadableDateString,\n  toReadableWeekString\n}","import { parseJson, areEqual, startOfWeek, includes } from '../Utils'\nimport { TimeSheetState } from '../state/TimeSheetState'\n\nconst timeSheetDatesKey: string = 'timeSheetDates'\n\nfunction getSavedTimeSheetDates(): Array<Date> {\n  const savedDatesString = localStorage.getItem(timeSheetDatesKey)\n  if (savedDatesString === null) {\n    return []\n  }\n  return parseJson<Array<string>>(savedDatesString).map(dateString => new Date(dateString))\n}\n\nfunction setSavedTimeSheetDates(dates: Array<Date>): void {\n  dates.forEach(validateIsStartOfWeekDate)\n  localStorage.setItem(timeSheetDatesKey, JSON.stringify(dates))\n}\n\nfunction addSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  if (!includes(savedDates, date)) {\n    setSavedTimeSheetDates([date, ...savedDates])\n  }\n}\n\nfunction deleteSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  setSavedTimeSheetDates(savedDates.filter(savedDate => !areEqual(date, savedDate)))\n}\n\nfunction saveTimeSheetToLocalStorage(date: Date, state: TimeSheetState): void {\n  validateIsStartOfWeekDate(date)\n\n  localStorage.setItem(`timeSheet-${date.toISOString()}`, JSON.stringify(state))\n  addSavedTimeSheetDate(date)\n}\n\nfunction existsTimeSheetInLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  // return includes(getSavedTimeSheetDates(), date, savedDate)\n  //   || localStorage.getItem(`timeSheet-${date.toISOString()}`) !== null\n  return localStorage.getItem(`timeSheet-${date.toISOString()}`) !== null\n}\n\nfunction loadTimeSheetFromLocalStorage(date: Date): TimeSheetState | null {\n  validateIsStartOfWeekDate(date)\n\n  const localStateString = localStorage.getItem(`timeSheet-${date.toISOString()}`)\n  if (localStateString === null) {\n    return null\n  }\n\n  return parseJson(localStateString)\n}\n\nfunction deleteTimeSheetFromLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  deleteSavedTimeSheetDate(date)\n\n  if (!existsTimeSheetInLocalStorage(date)) {\n    return false\n  }\n\n  localStorage.removeItem(`timeSheet-${date.toISOString()}`)\n  return true\n}\n\nfunction validateIsStartOfWeekDate(date: Date): void {\n  if (!areEqual(date, startOfWeek(date))) {\n    throw new Error(`Date ${date} does not match start of week ${startOfWeek(date)}`)\n  }\n}\n\nexport {\n  getSavedTimeSheetDates,\n  addSavedTimeSheetDate,\n  deleteSavedTimeSheetDate,\n  saveTimeSheetToLocalStorage,\n  existsTimeSheetInLocalStorage,\n  loadTimeSheetFromLocalStorage,\n  deleteTimeSheetFromLocalStorage\n}","enum DayOfWeek {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nconst daysOfWeek = [\n  DayOfWeek.Sunday,\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n  DayOfWeek.Saturday\n]\n\nexport default DayOfWeek;\nexport { daysOfWeek }\n","import { TimeTableProps } from '../TimeTable'\nimport DayOfWeek, { daysOfWeek } from '../DayOfWeek'\nimport { DayColumnProps } from '../DayColumn';\nimport { TimeSheetProps } from '../TimeSheet';\nimport { timeFromDate, addTime, startOfWeek } from '../Utils';\n\n\ninterface TimeSheetState {\n  weekStartDate: Date,\n  timeTablePropsMap: {[personName: string]: TimeTableProps}\n}\n\nfunction initialState(date: Date): TimeSheetState {\n  return {\n    weekStartDate: startOfWeek(date),\n    timeTablePropsMap: {}\n  }\n}\n\nfunction initialTimeTableProps(props: TimeSheetProps, personName: string, personPos: number): TimeTableProps {\n  return {\n    personName: personName,\n    timeTablePos: personPos,\n    date: props.date,\n    dayColumnsProps: daysOfWeek.reduce((map, dow) => {\n      map[dow] = initialDayColumnProps(props, personName, dow)\n      return map\n    }, {} as {[dow in DayOfWeek]?: DayColumnProps}\n    ) as {[dow in DayOfWeek]: DayColumnProps}\n  }\n}\n\nfunction initialDayColumnProps(props: TimeSheetProps,\n    personName: string, dow: DayOfWeek): DayColumnProps {\n  const startTime = addTime(timeFromDate(props.date, 8, 0, 0), dow)\n  const endTime = addTime(startTime, 0, 0, 30)\n\n  return {\n    personName: personName,\n    isDayOff: true,\n    dow: dow,\n    startTime: startTime,\n    endTime: endTime,\n    breaksLength: 0,\n  }\n}\n\nfunction cloneStateWithNewDate(state: TimeSheetState, date: Date): TimeSheetState {\n  const copiedPropsMapWithNewDate: {[personName: string]: TimeTableProps} = {}\n  for (const personName in state.timeTablePropsMap) {\n    copiedPropsMapWithNewDate[personName] = cloneTimeTablePropsWithNewDate(state.timeTablePropsMap[personName], date)\n  }\n\n  return {\n    ...state,\n    weekStartDate: startOfWeek(date),\n    timeTablePropsMap: copiedPropsMapWithNewDate\n  }\n}\n\nfunction cloneTimeTablePropsWithNewDate(props: TimeTableProps, date: Date): TimeTableProps {\n  return {\n    ...props,\n    date: date,\n    dayColumnsProps: daysOfWeek.reduce((map, dow) => {\n      map[dow] = cloneDayColumnPropsWithNewDate(props.dayColumnsProps[dow], dow, date)\n      return map\n    }, {} as {[dow in DayOfWeek]?: DayColumnProps}\n    ) as {[dow in DayOfWeek]: DayColumnProps}\n  }\n}\n\nfunction cloneDayColumnPropsWithNewDate(props: DayColumnProps, dow: DayOfWeek, date: Date): DayColumnProps {\n  const newDate = addTime(date, dow)\n\n  return {\n    ...props,\n    startTime: timeFromDate(newDate, props.startTime.getHours(), props.startTime.getMinutes(), props.startTime.getSeconds()),\n    endTime: timeFromDate(newDate, props.endTime.getHours(), props.endTime.getMinutes(), props.endTime.getSeconds()),\n  }\n}\n\nexport type { TimeSheetState }\nexport {\n  initialState,\n  initialTimeTableProps,\n  cloneStateWithNewDate\n}","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { addTime, toReadableWeekString, startOfWeek, includes, toReadableDateString } from '../Utils';\nimport { saveTimeSheetToLocalStorage, loadTimeSheetFromLocalStorage } from '../store/TimeSheetStore';\nimport { cloneStateWithNewDate } from '../state/TimeSheetState';\n\ninterface HomeProps {\n  timeSheetDates: Date[],\n  addTimeSheetDate: React.Dispatch<Date>\n}\n\nconst noTemplateTimeSheetValue = 'None'\n\nfunction Home(props: HomeProps) {\n  const [date, setDate] = useState(new Date(Date.now()))\n  const [isAddedTimeSheet, setIsAddedTimeSheet] = useState(false)\n\n  const [templateTimeSheetWeek, setTemplateTimeSheetWeek] = useState(noTemplateTimeSheetValue)\n\n  return (\n    <>\n      {isAddedTimeSheet &&\n        <Redirect to={`/${date.toISOString()}`} />\n      }\n      <h2>\n        Home\n      </h2>\n      <form onSubmit={(evt) => addTimeSheet(evt, date, setIsAddedTimeSheet, props.addTimeSheetDate, props.timeSheetDates, templateTimeSheetWeek)}>\n        <label htmlFor='date'>\n          Date:\n        </label>\n        <input name='date' type=\"date\" value={dateToInputValue(date)} onChange={(evt) => onDateChange(evt, setDate)} />\n        <label htmlFor='copyFrom'>\n          Copy from:\n        </label>\n        <select value={templateTimeSheetWeek} onChange={evt => onTemplateTimeSheetWeekChange(props.timeSheetDates, evt, setTemplateTimeSheetWeek)}>\n          <option key={noTemplateTimeSheetValue} value={noTemplateTimeSheetValue}>\n            None\n          </option>\n          {props.timeSheetDates.map(timeSheetDate =>\n          <option key={timeSheetDate.toISOString()} value={timeSheetDate.toISOString()}>\n            {toReadableWeekString(timeSheetDate, true /* includeYear */)}\n          </option>)}\n        </select>\n        <input type=\"submit\" value=\"Add new time sheet\" />\n      </form>\n    </>\n  );\n}\n\nfunction addTimeSheet(\n    event: React.FormEvent<HTMLFormElement>,\n    date: Date,\n    setIsAddedTimeSheet: React.Dispatch<React.SetStateAction<boolean>>,\n    addTimeSheetDate: React.Dispatch<Date>,\n    timeSheetDates: Date[],\n    templateTimeSheetWeek: string) {\n\n  event.preventDefault()\n\n  validateTimeSheetWeek(timeSheetDates, templateTimeSheetWeek)\n\n  const startOfWeekDate = startOfWeek(date)\n  if (includes(timeSheetDates, startOfWeekDate)) {\n    alert(`Time sheet already exists for ${toReadableDateString(date)} (week ${toReadableWeekString(startOfWeekDate)})`)\n    return\n  }\n\n  if (templateTimeSheetWeek !== noTemplateTimeSheetValue) {\n    const templateStartOfWeekDate = getStartDateFromTimeSheetWeek(timeSheetDates, templateTimeSheetWeek)\n    const templateTimeSheetState = loadTimeSheetFromLocalStorage(templateStartOfWeekDate)\n    if (templateTimeSheetState === null) {\n      throw new Error(`Saved week ${toReadableWeekString(templateStartOfWeekDate)} has no local saved data`)\n    }\n\n    const clonedTimeSheetState = cloneStateWithNewDate(templateTimeSheetState, startOfWeekDate)\n    saveTimeSheetToLocalStorage(startOfWeekDate, clonedTimeSheetState)\n  }\n \n  addTimeSheetDate(startOfWeekDate)\n  setIsAddedTimeSheet(true)\n}\n\nfunction dateToInputValue(date: Date): string {\n  let year: string = date.getFullYear().toString()\n  let month: string = (date.getMonth() + 1).toString().padStart(2, '0')\n  let dayOfMonth: string = date.getDate().toString().padStart(2, '0')\n  return `${year}-${month}-${dayOfMonth}`\n}\n\nfunction onDateChange(\n    event: React.ChangeEvent<HTMLInputElement>,\n    setDate: React.Dispatch<React.SetStateAction<Date>>) {\n  const inputDate = event.target.valueAsDate\n  if (inputDate === null) {\n    throw new Error(`Failed to set date in ${Home.name}`)\n  }\n\n  const newDate = addTime(inputDate, 0, 0, inputDate.getTimezoneOffset())\n  setDate(newDate)\n}\n\nfunction onTemplateTimeSheetWeekChange(\n    timeSheetDates: Date[],\n    event: React.ChangeEvent<HTMLSelectElement>,\n    setTemplateTimeSheetWeek: React.Dispatch<React.SetStateAction<string>>) {\n\n  const selectedDateString = event.target.value\n  if (selectedDateString === null) {\n    throw new Error(`Failed to set 'copy from' time sheet in ${Home.name}`)\n  }\n  validateTimeSheetWeek(timeSheetDates, selectedDateString)\n\n  setTemplateTimeSheetWeek(selectedDateString)\n}\n\nfunction validateTimeSheetWeek(timeSheetDates: Date[], timeSheetWeek: string) {\n  if (timeSheetWeek !== noTemplateTimeSheetValue &&\n      !getStartDateFromTimeSheetWeek(timeSheetDates, timeSheetWeek)) {\n    throw new Error(`Selected time sheet week ${timeSheetWeek} is not none or an existing week`)\n  }\n}\n\nfunction getStartDateFromTimeSheetWeek(timeSheetDates: Date[], timeSheetWeek: string): Date {\n  const matchingDates: Date[] = timeSheetDates.filter(date => date.toISOString() === timeSheetWeek)\n  if (matchingDates.length !== 1) {\n    throw new Error(`${timeSheetWeek} matches ${matchingDates.length} dates from ${timeSheetDates}, expected 1 match`)\n  }\n\n  return matchingDates[0]\n}\n\nexport default Home;\n","import React from 'react';\n\ntype TimeCellProps = {\n  time: Date,\n  onTimeChange: React.Dispatch<Date>\n}\n\nfunction TimeCell(props: TimeCellProps) {\n  return (\n    <input\n      className=\"timeCellInput\"\n      type=\"time\"\n      min=\"08:00:00\"\n      max=\"21:00:00\"\n      step={15 * 60}\n      value={timeToInputValue(props.time)}\n      placeholder=\"Set the time\"\n      onChange={(evt) => updateTimeFromInput(evt)}\n    />\n  );\n\n  function timeToInputValue(time: Date): string {\n    let hours: string = time.getHours().toString().padStart(2, '0')\n    let minutes: string = time.getMinutes().toString().padStart(2, '0')\n    let seconds: string = time.getSeconds().toString().padStart(2, '0')\n    return `${hours}:${minutes}:${seconds}`\n  }\n\n  function updateTimeFromInput(evt: React.ChangeEvent<HTMLInputElement>): void {\n    let inputTime: Date | null = evt.target.valueAsDate\n    if (inputTime === null) {\n      return\n    }\n\n    let newTime: Date = new Date(props.time)\n    newTime.setHours(inputTime.getUTCHours())\n    newTime.setMinutes(inputTime.getUTCMinutes())\n    newTime.setSeconds(inputTime.getUTCSeconds())\n    newTime.setMilliseconds(inputTime.getUTCMilliseconds())\n    props.onTimeChange(newTime)\n  }\n}\n\nexport default TimeCell;\nexport type { TimeCellProps };","import React from 'react';\n\ninterface NumberCellProps {\n  number: number,\n  onNumberChange?: React.Dispatch<number>,\n  readOnly?: boolean,\n  step?: number\n}\n\nfunction NumberCell(props: NumberCellProps) {\n\n  return (\n    <input\n      className=\"numberCellInput\"\n      type=\"number\"\n      min=\"0\"\n      step={props.step}\n      readOnly={props.readOnly}\n      value={props.number}\n      placeholder=\"Set the time\"\n      onChange={handleChangeFunction(props)}\n    />\n  );\n}\n\nfunction handleChangeFunction(props: NumberCellProps) {\n  if (props.onNumberChange === undefined) {\n    if (!props.readOnly) {\n      throw new Error('No number change handler provided for non-readonly input')\n    }\n    return undefined\n  }\n\n  return function(evt: React.ChangeEvent<HTMLInputElement>) {\n    props.onNumberChange!(evt.target.valueAsNumber)\n  }\n}\n\nexport default NumberCell;\n","import React from 'react';\nimport DayOfWeek from '../DayOfWeek';\n\ninterface DayOfWeekCellProps {\n  dow: DayOfWeek,\n}\n\nfunction DayOfWeekCell(props: DayOfWeekCellProps) {\n  const daysOfWeek = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n\n  return (\n    <input\n      className=\"dayOfWeekCellInput\"\n      type='text'\n      readOnly={true}\n      value={daysOfWeek[props.dow]}\n    />\n  );\n}\n\nexport default DayOfWeekCell;\n","import React, { useReducer, useEffect } from 'react';\nimport DayOfWeek from '../DayOfWeek'\nimport { cloneDeep } from \"lodash\"\nimport { TimeSheetProps } from '../TimeSheet';\nimport { TimeSheetState, initialState, initialTimeTableProps } from './TimeSheetState';\nimport { loadTimeSheetFromLocalStorage } from '../store/TimeSheetStore';\nimport { startOfWeek } from '../Utils';\nimport { TimeTableProps } from '../TimeTable';\n\ninterface TimeSheetAction {\n  type: TimeSheetActionType,\n  personName?: string,\n  dow?: DayOfWeek,\n  value?: any\n}\n\nenum TimeSheetActionType {\n  StartTimeUpdate,\n  EndTimeUpdate,\n  BreaksLengthUpdate,\n  IsDayOffUpdate,\n  SetState,\n  ResetTimeTableOrder,\n  MoveTimeTableUp,\n  MoveTimeTableDown,\n  AddTimeTable,\n  DeleteTimeTable\n}\n\nfunction useTimeSheetReducer(props: TimeSheetProps): [TimeSheetState, React.Dispatch<TimeSheetAction>] {\n  const [state, dispatch] = useReducer(\n    (state: TimeSheetState, action: TimeSheetAction) => reduce(props, state, action),\n    initialState(props.date))\n\n  useEffect(() => loadStateFromStorage(dispatch, props.date), [props.date]);\n\n  return [state, dispatch]\n}\n\nfunction loadStateFromStorage(dispatch: React.Dispatch<TimeSheetAction>, date: Date) {\n  const localState = loadTimeSheetFromLocalStorage(startOfWeek(date))\n  const newState = localState ?? initialState(date)\n  dispatch({\n    type: TimeSheetActionType.SetState,\n    value: newState\n  })\n\n  const personNames: string[] = Object.keys(newState.timeTablePropsMap)\n  if (personNames.some(person => newState.timeTablePropsMap[person].timeTablePos === undefined)) {\n    dispatch({\n      type: TimeSheetActionType.ResetTimeTableOrder\n    })\n  }\n}\n\nfunction reduce(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n    case TimeSheetActionType.EndTimeUpdate:\n    case TimeSheetActionType.BreaksLengthUpdate:\n    case TimeSheetActionType.IsDayOffUpdate:\n      return updateValue(state, action)\n    case TimeSheetActionType.SetState:\n      return action.value as TimeSheetState\n    case TimeSheetActionType.AddTimeTable:\n      return addTimeTable(props, state, action)\n    case TimeSheetActionType.DeleteTimeTable:\n      return deleteTimetable(state, action)\n    case TimeSheetActionType.ResetTimeTableOrder:\n      return resetTimeTableOrder(state)\n    case TimeSheetActionType.MoveTimeTableUp:\n      return moveTimeTableUp(state, action.personName!)\n    case TimeSheetActionType.MoveTimeTableDown:\n      return moveTimeTableDown(state, action.personName!)\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${reduce}`)\n  }\n}\n\nfunction updateValue(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet update')\n  }\n  if (action.dow === undefined) {\n    throw new Error('Day of week is undefined for time sheet update')\n  }\n\n  const timeTable = state.timeTablePropsMap[action.personName]\n  const dayColumn = timeTable.dayColumnsProps[action.dow]\n  \n  const updatedDayColumn = {...dayColumn}\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n      updatedDayColumn.startTime = action.value\n      break\n    case TimeSheetActionType.EndTimeUpdate:\n      updatedDayColumn.endTime = action.value\n      break\n    case TimeSheetActionType.BreaksLengthUpdate:\n      updatedDayColumn.breaksLength = action.value\n      break\n    case TimeSheetActionType.IsDayOffUpdate:\n      updatedDayColumn.isDayOff = action.value\n      break\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${updateValue}`)\n  }\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName].dayColumnsProps[action.dow]\n    = updatedDayColumn\n  return updatedState\n}\n\nfunction addTimeTable(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet add')\n  }\n  if (action.personName in state.timeTablePropsMap) {\n    throw new Error(`Person name ${action.personName} cannot be added because they already have a time table`)\n  }\n\n  const newPersonPos: number = Object.keys(state.timeTablePropsMap).length\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName] = initialTimeTableProps(props, action.personName, newPersonPos)\n\n  return updatedState\n}\n\nfunction deleteTimetable(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet delete')\n  }\n  if (!(action.personName in state.timeTablePropsMap)) {\n    throw new Error(`Person name ${action.personName} cannot be deleted because they have no time table`)\n  }\n\n  let updatedState: TimeSheetState = cloneDeep(state)\n  while (updatedState.timeTablePropsMap[action.personName].timeTablePos\n      !== Object.keys(state.timeTablePropsMap).length - 1) {\n    console.log(updatedState.timeTablePropsMap[action.personName].timeTablePos)\n    updatedState = moveTimeTableDown(updatedState, action.personName)\n  }\n\n  delete updatedState.timeTablePropsMap[action.personName]\n  return updatedState\n}\n\nfunction resetTimeTableOrder(state: TimeSheetState): TimeSheetState {\n  const updatedState = cloneDeep(state)\n  const sortedPersonNames = Object.keys(state.timeTablePropsMap)\n  \n  sortedPersonNames.forEach((personName, i) => {\n    updatedState.timeTablePropsMap[personName].timeTablePos = i\n  })\n\n  return updatedState\n}\n\nfunction moveTimeTableUp(state: TimeSheetState, personName: string): TimeSheetState {\n  const timeTablePosition = state.timeTablePropsMap[personName].timeTablePos\n  if (timeTablePosition === undefined) {\n    throw new Error(`Time table position is undefined`)\n  }\n\n  if (timeTablePosition === 0) {\n    return cloneDeep(state)\n  }\n  \n  return moveTimeTableAtPositionUp(state, timeTablePosition)\n}\n\nfunction moveTimeTableDown(state: TimeSheetState, personName: string): TimeSheetState {\n  const timeTablePosition = state.timeTablePropsMap[personName].timeTablePos\n  if (timeTablePosition === undefined) {\n    throw new Error(`Time table position is undefined`)\n  }\n\n  if (timeTablePosition === Object.keys(state.timeTablePropsMap).length - 1) {\n    return cloneDeep(state)\n  }\n\n  return moveTimeTableAtPositionUp(state, timeTablePosition + 1)\n}\n\nfunction moveTimeTableAtPositionUp(state: TimeSheetState, timeTablePosition: number): TimeSheetState {\n  if (!Number.isInteger(timeTablePosition)) {\n    throw new Error(`Time table position ${timeTablePosition} is not an integer`)\n  }\n  const timeTableCount = Object.keys(state.timeTablePropsMap).length\n  if (timeTablePosition < 0 || timeTablePosition >= timeTableCount) {\n    throw new Error(`Time table position ${timeTablePosition} is less than 0 or greater than ${timeTableCount}`)\n  }\n\n  const updatedState = cloneDeep(state)\n\n  if (timeTablePosition === 0) {\n    return updatedState\n  }\n\n  const timeTableAtPos = getTimeTableAtPos(updatedState, timeTablePosition)\n  const timeTableAbove = getTimeTableAtPos(updatedState, timeTablePosition - 1)\n\n  timeTableAtPos.timeTablePos = timeTablePosition - 1\n  timeTableAbove.timeTablePos = timeTablePosition\n\n  return updatedState\n}\n\nfunction getTimeTableAtPos(state: TimeSheetState, timeTablePos: number): TimeTableProps {\n  if (!Number.isInteger(timeTablePos)) {\n    throw new Error(`Time table position ${timeTablePos} is not an integer`)\n  }\n  const timeTableCount = Object.keys(state.timeTablePropsMap).length\n  if (timeTablePos < 0 || timeTablePos >= timeTableCount) {\n    throw new Error(`Time table position ${timeTablePos} is less than 0 or greater than ${timeTableCount}`)\n  }\n\n  const timeTablesAtPos = Object.values(state.timeTablePropsMap)\n    .filter(timeTableProp => timeTableProp.timeTablePos === timeTablePos)\n  if (timeTablesAtPos.length !== 1)  {\n    throw new Error(`Expected 1 timetable at position ${timeTablePos}, found ${timeTablesAtPos.length}`)\n  }\n\n  return timeTablesAtPos[0]\n}\n\nexport type { TimeSheetAction }\nexport { useTimeSheetReducer, TimeSheetActionType }","import React from 'react';\n\ntype CheckBoxCellProps = {\n  value: string,\n  isChecked: boolean,\n  onCheckedChange: React.Dispatch<boolean>\n}\n\nfunction CheckBoxCell(props: CheckBoxCellProps) {\n  return (\n    <input\n      className=\"checkBoxCellInput\"\n      type=\"checkbox\"\n      value={props.value}\n      onChange={updateCheckedFromInput}\n      checked={props.isChecked}\n    />\n  );\n\n  function updateCheckedFromInput(): void {\n    props.onCheckedChange(!props.isChecked)\n  }\n}\n\nexport default CheckBoxCell;\nexport type { CheckBoxCell };","import React, { useContext } from 'react';\nimport TimeCell from './cells/TimeCell'\nimport NumberCell from './cells/NumberCell'\nimport DayOfWeekCell from './cells/DayOfWeekCell';\nimport DayOfWeek from './DayOfWeek';\nimport { TimeSheetContextData, TimeSheetContext } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\nimport CheckBoxCell from './cells/CheckBoxCell';\n\ninterface DayColumnProps {\n  personName: string,\n  dow: DayOfWeek,\n  isDayOff?: boolean, // Optional for backwards compatibility\n  startTime: Date,\n  endTime: Date,\n  breaksLength: number,\n}\n\nfunction GetDayColumn(props: DayColumnProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  const dayOfWeekCell = <DayOfWeekCell key={0} dow={props.dow} />\n  const checkBoxCell = <CheckBoxCell\n    key={5}\n    isChecked={props.isDayOff ?? false}\n    onCheckedChange={isChecked => handleIsDayOffChange(props, timeSheetContext, isChecked)}\n    value={props.dow.toString()} />\n\n  if (props.isDayOff) {\n    return React.Children.toArray([\n      dayOfWeekCell,\n      <></>,\n      <></>,\n      <></>,\n      <></>,\n      checkBoxCell\n    ]);\n  }\n\n  return React.Children.toArray([\n    dayOfWeekCell,\n    <TimeCell\n      key={1}\n      time={props.startTime}\n      onTimeChange={date => handleStartTimeChange(props, timeSheetContext, date)} />,\n    <TimeCell\n      key={2}\n      time={props.endTime}\n      onTimeChange={date => handleEndTimeChange(props, timeSheetContext, date)} />,\n    <NumberCell\n      key={3}\n      number={props.breaksLength}\n      step={15}\n      onNumberChange={number => handleBreaksLengthChange(props, timeSheetContext, number)} />,\n    <NumberCell\n      key={4}\n      number={getTotalHoursWorking(props)}\n      readOnly={true}/>,\n    checkBoxCell\n  ]);\n}\n\nfunction getTotalHoursWorking(props: DayColumnProps): number {\n  if (props.isDayOff) {\n    return 0;\n  }\n\n  return props.endTime.getHours() - props.startTime.getHours()\n         - props.breaksLength / 60\n         + (props.endTime.getMinutes() - props.startTime.getMinutes()) / 60\n         + (props.endTime.getSeconds() - props.startTime.getSeconds()) / (60 * 60)\n}\n\nfunction handleStartTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.StartTimeUpdate, newTime)\n}\n\nfunction handleEndTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.EndTimeUpdate, newTime)\n}\n\nfunction handleBreaksLengthChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newNumber: number) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.BreaksLengthUpdate, newNumber)\n}\n\nfunction handleIsDayOffChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newIsChecked: boolean) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.IsDayOffUpdate, newIsChecked)\n}\n\nfunction handleChange<T>(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  actionType: TimeSheetActionType,\n  newValue: T) {\n\n  if (timeSheetContext === null) {\n    throw new Error('Context cannot be null in number change')\n  }\n\n  timeSheetContext.dispatch({\n    personName: props.personName,\n    dow: props.dow,\n    type: actionType,\n    value: newValue\n  })\n}\n\nexport default GetDayColumn;\nexport type { DayColumnProps };\nexport { getTotalHoursWorking }; // hack\n","import React, { useContext } from 'react';\nimport { DayColumnProps, getTotalHoursWorking } from './DayColumn'\nimport DayOfWeek, { daysOfWeek } from './DayOfWeek'\nimport GetDayColumn from './DayColumn';\nimport { TimeSheetContext, TimeSheetContextData } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\n\nconst headerRowName = [\n  '',\n]\nconst bodyRowNames = [\n  'DAY',\n  'START',\n  'END',\n  'UNPAID BREAKS (MINUTES)',\n  'DAILY HOURS TOTAL',\n  'IS DAY OFF?'\n]\n\ninterface TimeTableProps {\n  personName: string,\n  timeTablePos?: number,\n  date: Date,\n  dayColumnsProps: {[dow in DayOfWeek]: DayColumnProps}\n}\n\nfunction TimeTable(props: TimeTableProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  const dayColumnsElements = daysOfWeek\n    .map(dow => props.dayColumnsProps[dow])\n    .map(props => GetDayColumn(props))\n\n  const transposedDayColumnsElements = transpose(dayColumnsElements)\n  const bodyRows = bodyRowNames.map((rowName, rowNum) => {\n    return {\n      rowName: rowName,\n      transposedDayColumnElements: transposedDayColumnsElements[rowNum]\n    }})\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th scope='row'>\n            {headerRowName}\n            <button onClick={() => moveTimeTableUp(timeSheetContext, props.personName)}>Up</button>\n            <button onClick={() => moveTimeTableDown(timeSheetContext, props.personName)}>Down</button>\n            <button onClick={() => deleteTimeTable(timeSheetContext, props.personName)}>Delete</button>\n          </th>\n          <td colSpan={daysOfWeek.length}>\n            {props.personName}: {getTotalHoursWorkingInWeek(props)} hours\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {bodyRows.map(row => (\n        <tr key={row.rowName}>\n          <th scope='row'>\n            {row.rowName}\n          </th>\n          {row.transposedDayColumnElements.map((cell, i) => (\n          <td key={i}>\n            {cell}\n          </td>))}\n        </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction transpose<T>(array: Array<Array<T>>) {\n  return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n}\n\nfunction moveTimeTableUp(context: TimeSheetContextData, personName: string) {\n  context.dispatch({\n    type: TimeSheetActionType.MoveTimeTableUp,\n    personName: personName\n  })\n}\n\nfunction moveTimeTableDown(context: TimeSheetContextData, personName: string) {\n  context.dispatch({\n    type: TimeSheetActionType.MoveTimeTableDown,\n    personName: personName\n  })\n}\n\nfunction deleteTimeTable(context: TimeSheetContextData, personName: string) {\n  const confirmedCancel = window.confirm(`Are you sure you want to delete the time table for ${personName}?`)\n\n  if (confirmedCancel) {\n    context.dispatch({\n      type: TimeSheetActionType.DeleteTimeTable,\n      personName: personName\n    })\n  }\n}\n\nfunction getTotalHoursWorkingInWeek(props: TimeTableProps): number {\n  return daysOfWeek\n    .map(dow => getTotalHoursWorking(props.dayColumnsProps[dow]))\n    .reduce((hoursSoFar, hoursToday) => hoursSoFar + hoursToday, 0)\n}\n\nexport default TimeTable;\nexport type { TimeTableProps };\nexport { getTotalHoursWorkingInWeek }; // hack\n","import React, { FormEvent, useState, SetStateAction, useRef } from 'react';\nimport TimeTable, { getTotalHoursWorkingInWeek } from './TimeTable'\nimport { useTimeSheetReducer, TimeSheetAction, TimeSheetActionType } from './state/TimeSheetReducer';\nimport { TimeSheetState } from './state/TimeSheetState';\nimport { saveTimeSheetToLocalStorage, deleteTimeSheetFromLocalStorage } from './store/TimeSheetStore';\nimport { toReadableWeekString } from './Utils';\n\ninterface TimeSheetProps {\n  date: Date,\n  addTimeSheetDate: (date: Date) => void,\n  deleteTimeSheetDate: (date: Date) => void,\n  isDeletedTimeSheetDate: boolean\n}\n\ninterface TimeSheetContextData {\n  weekStartDate: Date,\n  dispatch: React.Dispatch<TimeSheetAction>\n}\n\nconst TimeSheetContext = React.createContext<TimeSheetContextData | null>(null)\nconst defaultAddPersonValue = ''\n\nfunction TimeSheet(props: TimeSheetProps) {\n  const [state, dispatch] = useTimeSheetReducer(props)\n  const timeSheetContext: TimeSheetContextData = {\n    weekStartDate: state.weekStartDate,\n    dispatch: dispatch\n  }\n\n  const [addPersonValue, setAddPersonValue] = useState(defaultAddPersonValue)\n  const addPersonInputRef = useRef<HTMLInputElement | null>(null)\n\n  return (\n    <TimeSheetContext.Provider value={timeSheetContext}>\n      <h2>\n        Week: {toReadableWeekString(props.date)}\n      </h2>\n      <button disabled={!canSaveTimeSheet(state.weekStartDate, state)} onClick={() => saveTimeSheet(state.weekStartDate, state, props.addTimeSheetDate)}>\n        Save Time Sheet To Local Storage\n      </button>\n      <button disabled={!canDeleteTimeSheet(state.weekStartDate, props.isDeletedTimeSheetDate)} onClick={() => deleteTimeSheet(state.weekStartDate, props.deleteTimeSheetDate)}>\n        Delete Time Sheet From Local Storage\n      </button>\n      <form onSubmit={(evt) => addTimeTable(evt, state, timeSheetContext, addPersonValue, setAddPersonValue, addPersonInputRef)}>\n        <label htmlFor='person'>\n          Person:\n        </label>\n        <input name='person' type=\"text\" ref={addPersonInputRef} value={addPersonValue} onChange={(evt) => setAddPersonValue(evt.target.value)} />\n        <input type=\"submit\" value=\"Add new timetable\" />\n      </form>\n      <p>\n        Total hours working in week: {getAllPeopleTotalHoursWorking(state)}\n      </p>\n      {Object.values(state.timeTablePropsMap)\n        .sort((timeTable, other) => timeTable.timeTablePos! - other.timeTablePos!)\n        .map(timeTable => (\n      <div className='container' key={timeTable.personName}>\n        {React.createElement(TimeTable, timeTable)}\n      </div>))}\n    </TimeSheetContext.Provider>\n  );\n}\n\nfunction canSaveTimeSheet(date: Date, state: TimeSheetState) {\n  return true\n}\n\nfunction canDeleteTimeSheet(date: Date, isDeletedTimeSheetDate: boolean) {\n  return !isDeletedTimeSheetDate\n}\n\nfunction saveTimeSheet(\n    date: Date,\n    state: TimeSheetState,\n    addTimeSheetDate: React.Dispatch<Date>) {\n\n  saveTimeSheetToLocalStorage(date, state)\n  addTimeSheetDate(date)\n\n  window.alert(`Successfully saved time sheet for ${toReadableWeekString(date)}`)\n}\n\nfunction deleteTimeSheet(\n    date: Date,\n    deleteTimeSheetDate: React.Dispatch<Date>) {\n\n  const confirmedCancel = window.confirm(`Are you sure you want to delete time sheet save data for ${toReadableWeekString(date)}?`)\n\n  if (confirmedCancel) {\n    deleteTimeSheetDate(date)\n    deleteTimeSheetFromLocalStorage(date)\n  \n    window.alert(`Successfully deleted time sheet save data for ${toReadableWeekString(date)}`)\n  }\n}\n\nfunction addTimeTable(\n    event: FormEvent<HTMLFormElement>,\n    state: TimeSheetState,\n    context: TimeSheetContextData,\n    personName: string,\n    setAddPersonValue: React.Dispatch<SetStateAction<string>>,\n    addPersonInputRef: React.MutableRefObject<HTMLInputElement | null>) {\n\n  event.preventDefault()\n\n  if (personName === '') {\n    alert('Cannot add timetable for nameless person')\n    return\n  }\n  if (Object.keys(state.timeTablePropsMap).some(person => person.toLowerCase() === personName.toLowerCase())) {\n    alert(`Timetable already exists for person ${personName}`)\n    return\n  }\n\n  context.dispatch({\n    type: TimeSheetActionType.AddTimeTable,\n    personName: personName\n  })\n\n  setAddPersonValue(defaultAddPersonValue)\n  addPersonInputRef.current!.focus()\n}\n\nfunction getAllPeopleTotalHoursWorking(state: TimeSheetState): number {\n  return Object.values(state.timeTablePropsMap)\n    .map(timeTableProp => getTotalHoursWorkingInWeek(timeTableProp))\n    .reduce((hoursSoFar, hoursToday) => hoursSoFar + hoursToday, 0)\n}\n\nexport default TimeSheet\nexport { TimeSheetContext }\nexport type { TimeSheetContextData, TimeSheetProps }","import React from 'react';\nimport TimeSheet from '../TimeSheet';\nimport { useParams, Redirect } from 'react-router-dom';\n\ninterface TimeSheetPageParams {\n  date: string\n}\n\ninterface TimeSheetPageProps {\n  isDeletedTimeSheetDate: (date: Date) => boolean,\n  addTimeSheetDate: (date: Date) => void,\n  deleteTimeSheetDate: (date: Date) => void,\n}\n\nfunction TimeSheetPage(props: TimeSheetPageProps) {\n  const pageParams: TimeSheetPageParams = useParams<TimeSheetPageParams>()\n  const date: Date = new Date(pageParams.date)\n\n  return (\n    <>\n      {props.isDeletedTimeSheetDate(date) &&\n        <Redirect to={`/`} />\n      }\n      <section className=\"time-sheet\">\n        <TimeSheet date={date}\n          addTimeSheetDate={props.addTimeSheetDate}\n          deleteTimeSheetDate={props.deleteTimeSheetDate}\n          isDeletedTimeSheetDate={props.isDeletedTimeSheetDate(date)} />\n      </section>\n    </>\n  );\n}\n\nexport default TimeSheetPage;\n","import React, { useState, SetStateAction } from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport TimeSheetPage from './pages/TimeSheetPage';\nimport { getSavedTimeSheetDates, addSavedTimeSheetDate, deleteSavedTimeSheetDate } from './store/TimeSheetStore';\nimport { startOfWeek, toReadableWeekString, includes } from './Utils';\n\nconst baseUrl = '/timesheet-maker'\n\nfunction App() {\n  const [timeSheetDates, setTimeSheetDates] = useState(getSavedTimeSheetDates())\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            {timeSheetDates.sort().map(date => \n            <li key={date.toISOString()}>\n              <Link to={`/${date.toISOString()}`}>\n                {toReadableWeekString(date, true)}\n              </Link>\n            </li>)}\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path='/:date'>\n            <TimeSheetPage isDeletedTimeSheetDate={date => isDeletedTimeSheetDate(timeSheetDates, date)}\n              addTimeSheetDate={date => addTimeSheetDate(timeSheetDates, setTimeSheetDates, date)}\n              deleteTimeSheetDate={date => deleteTimeSheetDate(timeSheetDates, setTimeSheetDates, date)} />\n          </Route>\n          <Route path=''>\n            <Home timeSheetDates={timeSheetDates}\n              addTimeSheetDate={date => addTimeSheetDate(timeSheetDates, setTimeSheetDates, date)} />\n          </Route>\n        </Switch>\n      </>\n    </HashRouter>\n  );\n}\n\nfunction addTimeSheetDate(\n    timeSheetDates: Date[],\n    setTimeSheetDates: React.Dispatch<SetStateAction<Date[]>>,\n    date: Date): void {\n  \n  const startOfWeekDate = startOfWeek(date)\n  if (!includes(timeSheetDates, startOfWeekDate)) {\n    addSavedTimeSheetDate(startOfWeekDate)\n    setTimeSheetDates(getSavedTimeSheetDates())\n  }\n}\n\nfunction deleteTimeSheetDate(\n  timeSheetDates: Date[],\n  setTimeSheetDates: React.Dispatch<SetStateAction<Date[]>>,\n  date: Date): void {\n    \n  const startOfWeekDate = startOfWeek(date)\n  if (includes(timeSheetDates, startOfWeekDate)) {\n    deleteSavedTimeSheetDate(startOfWeekDate)\n    setTimeSheetDates(getSavedTimeSheetDates())\n  }\n}\n\nfunction isDeletedTimeSheetDate(\n  timeSheetDates: Date[],\n  date: Date): boolean {\n    \n  const startOfWeekDate = startOfWeek(date)\n  return !includes(timeSheetDates, startOfWeekDate)\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}