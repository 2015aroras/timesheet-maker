{"version":3,"sources":["Utils.tsx","store/TimeSheetStore.tsx","DayOfWeek.tsx","state/TimeSheetState.tsx","pages/Home.tsx","cells/TimeCell.tsx","cells/NumberCell.tsx","cells/DayOfWeekCell.tsx","state/TimeSheetReducer.tsx","cells/CheckBoxCell.tsx","DayColumn.tsx","TimeTable.tsx","TimeSheet.tsx","pages/TimeSheetPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["areEqual","date","otherDate","toISOString","includes","dates","queryDate","some","parseJson","jsonString","JSON","parse","key","value","toLowerCase","endsWith","Date","startOfWeek","addTime","getDay","setHours","setMinutes","setSeconds","setMilliseconds","timeFromDate","hours","minutes","seconds","time","days","getTime","toReadableDateString","includeYear","yearSuffix","getFullYear","getDate","getMonth","toReadableWeekString","startOfWeekDate","timeSheetDatesKey","getSavedTimeSheetDates","savedDatesString","localStorage","getItem","map","dateString","setSavedTimeSheetDates","forEach","validateIsStartOfWeekDate","setItem","stringify","addSavedTimeSheetDate","savedDates","deleteSavedTimeSheetDate","filter","savedDate","saveTimeSheetToLocalStorage","state","loadTimeSheetFromLocalStorage","localStateString","deleteTimeSheetFromLocalStorage","existsTimeSheetInLocalStorage","removeItem","Error","DayOfWeek","daysOfWeek","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","initialState","weekStartDate","timeTablePropsMap","initialTimeTableProps","props","personName","dayColumnsProps","reduce","dow","startTime","endTime","isDayOff","breaksLength","initialDayColumnProps","cloneTimeTablePropsWithNewDate","newDate","getHours","getMinutes","getSeconds","cloneDayColumnPropsWithNewDate","noTemplateTimeSheetValue","Home","useState","now","setDate","isAddedTimeSheet","setIsAddedTimeSheet","templateTimeSheetWeek","setTemplateTimeSheetWeek","to","onSubmit","evt","event","addTimeSheetDate","timeSheetDates","preventDefault","validateTimeSheetWeek","alert","templateStartOfWeekDate","getStartDateFromTimeSheetWeek","templateTimeSheetState","copiedPropsMapWithNewDate","cloneStateWithNewDate","addTimeSheet","htmlFor","name","type","dateToInputValue","onChange","inputDate","target","valueAsDate","getTimezoneOffset","onDateChange","selectedDateString","onTemplateTimeSheetWeekChange","timeSheetDate","year","toString","month","padStart","dayOfMonth","timeSheetWeek","matchingDates","length","TimeCell","className","min","max","step","timeToInputValue","placeholder","inputTime","newTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","onTimeChange","updateTimeFromInput","handleChangeFunction","undefined","onNumberChange","valueAsNumber","readOnly","NumberCell","number","DayOfWeekCell","TimeSheetActionType","reducer","action","StartTimeUpdate","EndTimeUpdate","BreaksLengthUpdate","IsDayOffUpdate","valueUpdater","SetState","AddTimeTable","updatedState","cloneDeep","timeTableAdder","DeleteTimeTable","timeTableDeleter","dayColumn","updatedDayColumn","CheckBoxCell","onCheckedChange","isChecked","checked","getTotalHoursWorking","handleChange","timeSheetContext","actionType","newValue","dispatch","GetDayColumn","useContext","TimeSheetContext","dayOfWeekCell","checkBoxCell","newIsChecked","handleIsDayOffChange","React","Children","toArray","handleStartTimeChange","handleEndTimeChange","newNumber","handleBreaksLengthChange","headerRowName","bodyRowNames","getTotalHoursWorkingInWeek","hoursSoFar","hoursToday","TimeTable","array","dayColumnsElements","transposedDayColumnsElements","_","colIndex","row","bodyRows","rowName","rowNum","transposedDayColumnElements","scope","onClick","context","colSpan","cell","i","createContext","getAllPeopleTotalHoursWorking","Object","values","timeTableProp","TimeSheet","isDeletedTimeSheetDate","useReducer","useEffect","localState","useTimeSheetReducer","addPersonValue","setAddPersonValue","addPersonInputRef","useRef","Provider","disabled","window","saveTimeSheet","deleteTimeSheetDate","confirm","deleteTimeSheet","keys","person","current","focus","addTimeTable","ref","createElement","TimeSheetPage","pageParams","useParams","setTimeSheetDates","App","basename","sort","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aaf6968.chunk.js","sourcesContent":["function areEqual(date: Date, otherDate: Date): boolean {\n  return date.toISOString() === otherDate.toISOString()\n}\n\nfunction includes(dates: Date[], queryDate: Date): boolean {\n  return dates.some(date => areEqual(date, queryDate))\n}\n\nfunction parseJson<T>(jsonString: string): T {\n  return JSON.parse(jsonString, (key, value) => {\n    if (key.toLowerCase().endsWith('date') || key.toLowerCase().endsWith('time')) {\n      return new Date(value)\n    }\n    return value\n  })\n}\n\nfunction startOfWeek(date: Date): Date {\n  let startOfWeek = addTime(date, - date.getDay())\n  startOfWeek.setHours(0)\n  startOfWeek.setMinutes(0)\n  startOfWeek.setSeconds(0)\n  startOfWeek.setMilliseconds(0)\n  return startOfWeek\n}\n\nfunction timeFromDate(date: Date, hours: number, minutes: number, seconds: number): Date {\n  let time: Date = new Date(date)\n  time.setHours(hours)\n  time.setMinutes(minutes)\n  time.setSeconds(seconds)\n  time.setMilliseconds(0)\n  return time\n}\n\nfunction addTime(date: Date, days?: number, hours?: number,\n    minutes?: number, seconds?: number): Date {\n  return new Date(date.getTime()\n    + (days ?? 0) * 24 * 60 * 60 * 1000 \n    + (hours ?? 0) * 60 * 60 * 1000\n    + (minutes ?? 0) * 60 * 1000\n    + (seconds ?? 0) * 1000\n  )\n}\n\nfunction toReadableDateString(date: Date, includeYear=false): string {\n  const yearSuffix = includeYear ? `/${date.getFullYear()}` : ''\n  return `${date.getDate()}/${date.getMonth() + 1}` + yearSuffix\n}\n\nfunction toReadableWeekString(date: Date, includeYear=false): string {\n  const startOfWeekDate = startOfWeek(date)\n  return `${toReadableDateString(startOfWeekDate, includeYear)} – ${toReadableDateString(addTime(startOfWeekDate, 7), includeYear)}`\n}\n\n\n\nexport {\n  areEqual,\n  includes,\n  parseJson,\n  startOfWeek,\n  timeFromDate,\n  addTime,\n  toReadableDateString,\n  toReadableWeekString\n}","import { parseJson, areEqual, startOfWeek, includes } from '../Utils'\nimport { TimeSheetState } from '../state/TimeSheetState'\n\nconst timeSheetDatesKey: string = 'timeSheetDates'\n\nfunction getSavedTimeSheetDates(): Array<Date> {\n  const savedDatesString = localStorage.getItem(timeSheetDatesKey)\n  if (savedDatesString === null) {\n    return []\n  }\n  return parseJson<Array<string>>(savedDatesString).map(dateString => new Date(dateString))\n}\n\nfunction setSavedTimeSheetDates(dates: Array<Date>): void {\n  dates.forEach(validateIsStartOfWeekDate)\n  localStorage.setItem(timeSheetDatesKey, JSON.stringify(dates))\n}\n\nfunction addSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  if (!includes(savedDates, date)) {\n    setSavedTimeSheetDates([date, ...savedDates])\n  }\n}\n\nfunction deleteSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  setSavedTimeSheetDates(savedDates.filter(savedDate => !areEqual(date, savedDate)))\n}\n\nfunction saveTimeSheetToLocalStorage(date: Date, state: TimeSheetState): void {\n  validateIsStartOfWeekDate(date)\n\n  localStorage.setItem(`timeSheet-${date.toISOString()}`, JSON.stringify(state))\n  addSavedTimeSheetDate(date)\n}\n\nfunction existsTimeSheetInLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  // return includes(getSavedTimeSheetDates(), date, savedDate)\n  //   || localStorage.getItem(`timeSheet-${date.toISOString()}`) !== null\n  return localStorage.getItem(`timeSheet-${date.toISOString()}`) !== null\n}\n\nfunction loadTimeSheetFromLocalStorage(date: Date): TimeSheetState | null {\n  validateIsStartOfWeekDate(date)\n\n  const localStateString = localStorage.getItem(`timeSheet-${date.toISOString()}`)\n  if (localStateString === null) {\n    return null\n  }\n\n  return parseJson(localStateString)\n}\n\nfunction deleteTimeSheetFromLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  deleteSavedTimeSheetDate(date)\n\n  if (!existsTimeSheetInLocalStorage(date)) {\n    return false\n  }\n\n  localStorage.removeItem(`timeSheet-${date.toISOString()}`)\n  return true\n}\n\nfunction validateIsStartOfWeekDate(date: Date): void {\n  if (!areEqual(date, startOfWeek(date))) {\n    throw new Error(`Date ${date} does not match start of week ${startOfWeek(date)}`)\n  }\n}\n\nexport {\n  getSavedTimeSheetDates,\n  addSavedTimeSheetDate,\n  deleteSavedTimeSheetDate,\n  saveTimeSheetToLocalStorage,\n  existsTimeSheetInLocalStorage,\n  loadTimeSheetFromLocalStorage,\n  deleteTimeSheetFromLocalStorage\n}","enum DayOfWeek {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nconst daysOfWeek = [\n  DayOfWeek.Sunday,\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n  DayOfWeek.Saturday\n]\n\nexport default DayOfWeek;\nexport { daysOfWeek }\n","import { TimeTableProps } from '../TimeTable'\nimport DayOfWeek, { daysOfWeek } from '../DayOfWeek'\nimport { DayColumnProps } from '../DayColumn';\nimport { TimeSheetProps } from '../TimeSheet';\nimport { timeFromDate, addTime, startOfWeek } from '../Utils';\n\n\ninterface TimeSheetState {\n  weekStartDate: Date,\n  timeTablePropsMap: {[personName: string]: TimeTableProps}\n}\n\nfunction initialState(date: Date): TimeSheetState {\n  return {\n    weekStartDate: startOfWeek(date),\n    timeTablePropsMap: {}\n  }\n}\n\nfunction initialTimeTableProps(props: TimeSheetProps, personName: string): TimeTableProps {\n  return {\n    personName: personName,\n    date: props.date,\n    dayColumnsProps: daysOfWeek.reduce((map, dow) => {\n      map[dow] = initialDayColumnProps(props, personName, dow)\n      return map\n    }, {} as {[dow in DayOfWeek]?: DayColumnProps}\n    ) as {[dow in DayOfWeek]: DayColumnProps}\n  }\n}\n\nfunction initialDayColumnProps(props: TimeSheetProps,\n    personName: string, dow: DayOfWeek): DayColumnProps {\n  const startTime = addTime(timeFromDate(props.date, 8, 0, 0), dow)\n  const endTime = addTime(startTime, 0, 0, 30)\n\n  return {\n    personName: personName,\n    isDayOff: true,\n    dow: dow,\n    startTime: startTime,\n    endTime: endTime,\n    breaksLength: 0,\n  }\n}\n\nfunction cloneStateWithNewDate(state: TimeSheetState, date: Date): TimeSheetState {\n  const copiedPropsMapWithNewDate: {[personName: string]: TimeTableProps} = {}\n  for (const personName in state.timeTablePropsMap) {\n    copiedPropsMapWithNewDate[personName] = cloneTimeTablePropsWithNewDate(state.timeTablePropsMap[personName], date)\n  }\n\n  return {\n    weekStartDate: startOfWeek(date),\n    timeTablePropsMap: copiedPropsMapWithNewDate\n  }\n}\n\nfunction cloneTimeTablePropsWithNewDate(props: TimeTableProps, date: Date): TimeTableProps {\n  return {\n    personName: props.personName,\n    date: date,\n    dayColumnsProps: daysOfWeek.reduce((map, dow) => {\n      map[dow] = cloneDayColumnPropsWithNewDate(props.dayColumnsProps[dow], dow, date)\n      return map\n    }, {} as {[dow in DayOfWeek]?: DayColumnProps}\n    ) as {[dow in DayOfWeek]: DayColumnProps}\n  }\n}\n\nfunction cloneDayColumnPropsWithNewDate(props: DayColumnProps, dow: DayOfWeek, date: Date): DayColumnProps {\n  const newDate = addTime(date, dow)\n\n  return {\n    ...props,\n    startTime: timeFromDate(newDate, props.startTime.getHours(), props.startTime.getMinutes(), props.startTime.getSeconds()),\n    endTime: timeFromDate(newDate, props.endTime.getHours(), props.endTime.getMinutes(), props.endTime.getSeconds()),\n  }\n}\n\nexport type { TimeSheetState }\nexport {\n  initialState,\n  initialTimeTableProps,\n  cloneStateWithNewDate\n}","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { addTime, toReadableWeekString, startOfWeek, includes, toReadableDateString } from '../Utils';\nimport { saveTimeSheetToLocalStorage, loadTimeSheetFromLocalStorage } from '../store/TimeSheetStore';\nimport { cloneStateWithNewDate } from '../state/TimeSheetState';\n\ninterface HomeProps {\n  timeSheetDates: Date[],\n  addTimeSheetDate: React.Dispatch<Date>\n}\n\nconst noTemplateTimeSheetValue = 'None'\n\nfunction Home(props: HomeProps) {\n  const [date, setDate] = useState(new Date(Date.now()))\n  const [isAddedTimeSheet, setIsAddedTimeSheet] = useState(false)\n\n  const [templateTimeSheetWeek, setTemplateTimeSheetWeek] = useState(noTemplateTimeSheetValue)\n\n  return (\n    <>\n      {isAddedTimeSheet &&\n        <Redirect to={`/${date.toISOString()}`} />\n      }\n      <h2>\n        Home\n      </h2>\n      <form onSubmit={(evt) => addTimeSheet(evt, date, setIsAddedTimeSheet, props.addTimeSheetDate, props.timeSheetDates, templateTimeSheetWeek)}>\n        <label htmlFor='date'>\n          Date:\n        </label>\n        <input name='date' type=\"date\" value={dateToInputValue(date)} onChange={(evt) => onDateChange(evt, setDate)} />\n        <label htmlFor='copyFrom'>\n          Copy from:\n        </label>\n        <select value={templateTimeSheetWeek} onChange={evt => onTemplateTimeSheetWeekChange(props.timeSheetDates, evt, setTemplateTimeSheetWeek)}>\n          <option key={noTemplateTimeSheetValue} value={noTemplateTimeSheetValue}>\n            None\n          </option>\n          {props.timeSheetDates.map(timeSheetDate =>\n          <option key={timeSheetDate.toISOString()} value={timeSheetDate.toISOString()}>\n            {toReadableWeekString(timeSheetDate, true /* includeYear */)}\n          </option>)}\n        </select>\n        <input type=\"submit\" value=\"Add new time sheet\" />\n      </form>\n    </>\n  );\n}\n\nfunction addTimeSheet(\n    event: React.FormEvent<HTMLFormElement>,\n    date: Date,\n    setIsAddedTimeSheet: React.Dispatch<React.SetStateAction<boolean>>,\n    addTimeSheetDate: React.Dispatch<Date>,\n    timeSheetDates: Date[],\n    templateTimeSheetWeek: string) {\n\n  event.preventDefault()\n\n  validateTimeSheetWeek(timeSheetDates, templateTimeSheetWeek)\n\n  const startOfWeekDate = startOfWeek(date)\n  if (includes(timeSheetDates, startOfWeekDate)) {\n    alert(`Time sheet already exists for ${toReadableDateString(date)} (week ${toReadableWeekString(startOfWeekDate)})`)\n    return\n  }\n\n  if (templateTimeSheetWeek !== noTemplateTimeSheetValue) {\n    const templateStartOfWeekDate = getStartDateFromTimeSheetWeek(timeSheetDates, templateTimeSheetWeek)\n    const templateTimeSheetState = loadTimeSheetFromLocalStorage(templateStartOfWeekDate)\n    if (templateTimeSheetState === null) {\n      throw new Error(`Saved week ${toReadableWeekString(templateStartOfWeekDate)} has no local saved data`)\n    }\n\n    const clonedTimeSheetState = cloneStateWithNewDate(templateTimeSheetState, startOfWeekDate)\n    saveTimeSheetToLocalStorage(startOfWeekDate, clonedTimeSheetState)\n  }\n \n  addTimeSheetDate(startOfWeekDate)\n  setIsAddedTimeSheet(true)\n}\n\nfunction dateToInputValue(date: Date): string {\n  let year: string = date.getFullYear().toString()\n  let month: string = (date.getMonth() + 1).toString().padStart(2, '0')\n  let dayOfMonth: string = date.getDate().toString().padStart(2, '0')\n  return `${year}-${month}-${dayOfMonth}`\n}\n\nfunction onDateChange(\n    event: React.ChangeEvent<HTMLInputElement>,\n    setDate: React.Dispatch<React.SetStateAction<Date>>) {\n  const inputDate = event.target.valueAsDate\n  if (inputDate === null) {\n    throw new Error(`Failed to set date in ${Home.name}`)\n  }\n\n  const newDate = addTime(inputDate, 0, 0, inputDate.getTimezoneOffset())\n  setDate(newDate)\n}\n\nfunction onTemplateTimeSheetWeekChange(\n    timeSheetDates: Date[],\n    event: React.ChangeEvent<HTMLSelectElement>,\n    setTemplateTimeSheetWeek: React.Dispatch<React.SetStateAction<string>>) {\n\n  const selectedDateString = event.target.value\n  if (selectedDateString === null) {\n    throw new Error(`Failed to set 'copy from' time sheet in ${Home.name}`)\n  }\n  validateTimeSheetWeek(timeSheetDates, selectedDateString)\n\n  setTemplateTimeSheetWeek(selectedDateString)\n}\n\nfunction validateTimeSheetWeek(timeSheetDates: Date[], timeSheetWeek: string) {\n  if (timeSheetWeek !== noTemplateTimeSheetValue &&\n      !getStartDateFromTimeSheetWeek(timeSheetDates, timeSheetWeek)) {\n    throw new Error(`Selected time sheet week ${timeSheetWeek} is not none or an existing week`)\n  }\n}\n\nfunction getStartDateFromTimeSheetWeek(timeSheetDates: Date[], timeSheetWeek: string): Date {\n  const matchingDates: Date[] = timeSheetDates.filter(date => date.toISOString() === timeSheetWeek)\n  if (matchingDates.length !== 1) {\n    throw new Error(`${timeSheetWeek} matches ${matchingDates.length} dates from ${timeSheetDates}, expected 1 match`)\n  }\n\n  return matchingDates[0]\n}\n\nexport default Home;\n","import React from 'react';\n\ntype TimeCellProps = {\n  time: Date,\n  onTimeChange: React.Dispatch<Date>\n}\n\nfunction TimeCell(props: TimeCellProps) {\n  return (\n    <input\n      className=\"timeCellInput\"\n      type=\"time\"\n      min=\"08:00:00\"\n      max=\"21:00:00\"\n      step={15 * 60}\n      value={timeToInputValue(props.time)}\n      placeholder=\"Set the time\"\n      onChange={(evt) => updateTimeFromInput(evt)}\n    />\n  );\n\n  function timeToInputValue(time: Date): string {\n    let hours: string = time.getHours().toString().padStart(2, '0')\n    let minutes: string = time.getMinutes().toString().padStart(2, '0')\n    let seconds: string = time.getSeconds().toString().padStart(2, '0')\n    return `${hours}:${minutes}:${seconds}`\n  }\n\n  function updateTimeFromInput(evt: React.ChangeEvent<HTMLInputElement>): void {\n    let inputTime: Date | null = evt.target.valueAsDate\n    if (inputTime === null) {\n      return\n    }\n\n    let newTime: Date = new Date(props.time)\n    newTime.setHours(inputTime.getUTCHours())\n    newTime.setMinutes(inputTime.getUTCMinutes())\n    newTime.setSeconds(inputTime.getUTCSeconds())\n    newTime.setMilliseconds(inputTime.getUTCMilliseconds())\n    props.onTimeChange(newTime)\n  }\n}\n\nexport default TimeCell;\nexport type { TimeCellProps };","import React from 'react';\n\ninterface NumberCellProps {\n  number: number,\n  onNumberChange?: React.Dispatch<number>,\n  readOnly?: boolean,\n  step?: number\n}\n\nfunction NumberCell(props: NumberCellProps) {\n\n  return (\n    <input\n      className=\"numberCellInput\"\n      type=\"number\"\n      min=\"0\"\n      step={props.step}\n      readOnly={props.readOnly}\n      value={props.number}\n      placeholder=\"Set the time\"\n      onChange={handleChangeFunction(props)}\n    />\n  );\n}\n\nfunction handleChangeFunction(props: NumberCellProps) {\n  if (props.onNumberChange === undefined) {\n    if (!props.readOnly) {\n      throw new Error('No number change handler provided for non-readonly input')\n    }\n    return undefined\n  }\n\n  return function(evt: React.ChangeEvent<HTMLInputElement>) {\n    props.onNumberChange!(evt.target.valueAsNumber)\n  }\n}\n\nexport default NumberCell;\n","import React from 'react';\nimport DayOfWeek from '../DayOfWeek';\n\ninterface DayOfWeekCellProps {\n  dow: DayOfWeek,\n}\n\nfunction DayOfWeekCell(props: DayOfWeekCellProps) {\n  const daysOfWeek = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n\n  return (\n    <input\n      className=\"dayOfWeekCellInput\"\n      type='text'\n      readOnly={true}\n      value={daysOfWeek[props.dow]}\n    />\n  );\n}\n\nexport default DayOfWeekCell;\n","import React, { useReducer, useEffect } from 'react';\nimport DayOfWeek from '../DayOfWeek'\nimport { cloneDeep } from \"lodash\"\nimport { TimeSheetProps } from '../TimeSheet';\nimport { TimeSheetState, initialState, initialTimeTableProps } from './TimeSheetState';\nimport { loadTimeSheetFromLocalStorage } from '../store/TimeSheetStore';\nimport { startOfWeek } from '../Utils';\n\ninterface TimeSheetAction {\n  type: TimeSheetActionType,\n  personName?: string,\n  dow?: DayOfWeek,\n  value?: any\n}\n\nenum TimeSheetActionType {\n  StartTimeUpdate,\n  EndTimeUpdate,\n  BreaksLengthUpdate,\n  IsDayOffUpdate,\n  SetState,\n  AddTimeTable,\n  DeleteTimeTable\n}\n\nfunction useTimeSheetReducer(props: TimeSheetProps): [TimeSheetState, React.Dispatch<TimeSheetAction>] {\n  const [state, dispatch] = useReducer(\n    (state: TimeSheetState, action: TimeSheetAction) => reducer(props, state, action),\n    initialState(props.date))\n\n  useEffect(() => {\n    const localState = loadTimeSheetFromLocalStorage(startOfWeek(props.date))\n    dispatch({\n      type: TimeSheetActionType.SetState,\n      value: localState ?? initialState(props.date)\n    })\n    \n    // return () => {\n    //   console.log('Setting state')\n    //   localStorage.setItem('state', JSON.stringify(state))\n    // };\n  }, [props.date]);\n\n  return [state, dispatch]\n}\n\nfunction reducer(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n    case TimeSheetActionType.EndTimeUpdate:\n    case TimeSheetActionType.BreaksLengthUpdate:\n    case TimeSheetActionType.IsDayOffUpdate:\n      return valueUpdater(state, action)\n    case TimeSheetActionType.SetState:\n      return action.value as TimeSheetState\n    case TimeSheetActionType.AddTimeTable:\n      return timeTableAdder(props, state, action)\n    case TimeSheetActionType.DeleteTimeTable:\n      return timeTableDeleter(state, action)\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${reducer}`)\n  }\n}\n\nfunction valueUpdater(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet update')\n  }\n  if (action.dow === undefined) {\n    throw new Error('Day of week is undefined for time sheet update')\n  }\n\n  const timeTable = state.timeTablePropsMap[action.personName]\n  const dayColumn = timeTable.dayColumnsProps[action.dow]\n  \n  const updatedDayColumn = {...dayColumn}\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n      updatedDayColumn.startTime = action.value\n      break\n    case TimeSheetActionType.EndTimeUpdate:\n      updatedDayColumn.endTime = action.value\n      break\n    case TimeSheetActionType.BreaksLengthUpdate:\n      updatedDayColumn.breaksLength = action.value\n      break\n    case TimeSheetActionType.IsDayOffUpdate:\n      updatedDayColumn.isDayOff = action.value\n      break\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${valueUpdater}`)\n  }\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName].dayColumnsProps[action.dow]\n    = updatedDayColumn\n  return updatedState\n}\n\nfunction timeTableAdder(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet add')\n  }\n  if (action.personName in state.timeTablePropsMap) {\n    throw new Error(`Person name ${action.personName} cannot be added because they already have a time table`)\n  }\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName] = initialTimeTableProps(props, action.personName)\n  return updatedState\n}\n\nfunction timeTableDeleter(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet delete')\n  }\n  if (!(action.personName in state.timeTablePropsMap)) {\n    throw new Error(`Person name ${action.personName} cannot be deleted because they have no time table`)\n  }\n\n  const updatedState = cloneDeep(state)\n  delete updatedState.timeTablePropsMap[action.personName]\n  return updatedState\n}\n\nexport type { TimeSheetAction }\nexport { useTimeSheetReducer, TimeSheetActionType }","import React from 'react';\n\ntype CheckBoxCellProps = {\n  value: string,\n  isChecked: boolean,\n  onCheckedChange: React.Dispatch<boolean>\n}\n\nfunction CheckBoxCell(props: CheckBoxCellProps) {\n  return (\n    <input\n      className=\"checkBoxCellInput\"\n      type=\"checkbox\"\n      value={props.value}\n      onChange={updateCheckedFromInput}\n      checked={props.isChecked}\n    />\n  );\n\n  function updateCheckedFromInput(): void {\n    props.onCheckedChange(!props.isChecked)\n  }\n}\n\nexport default CheckBoxCell;\nexport type { CheckBoxCell };","import React, { useContext } from 'react';\nimport TimeCell from './cells/TimeCell'\nimport NumberCell from './cells/NumberCell'\nimport DayOfWeekCell from './cells/DayOfWeekCell';\nimport DayOfWeek from './DayOfWeek';\nimport { TimeSheetContextData, TimeSheetContext } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\nimport CheckBoxCell from './cells/CheckBoxCell';\n\ninterface DayColumnProps {\n  personName: string,\n  dow: DayOfWeek,\n  isDayOff?: boolean, // Optional for backwards compatibility\n  startTime: Date,\n  endTime: Date,\n  breaksLength: number,\n}\n\nfunction GetDayColumn(props: DayColumnProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  const dayOfWeekCell = <DayOfWeekCell key={0} dow={props.dow} />\n  const checkBoxCell = <CheckBoxCell\n    key={5}\n    isChecked={props.isDayOff ?? false}\n    onCheckedChange={isChecked => handleIsDayOffChange(props, timeSheetContext, isChecked)}\n    value={props.dow.toString()} />\n\n  if (props.isDayOff) {\n    return React.Children.toArray([\n      dayOfWeekCell,\n      <></>,\n      <></>,\n      <></>,\n      <></>,\n      checkBoxCell\n    ]);\n  }\n\n  return React.Children.toArray([\n    dayOfWeekCell,\n    <TimeCell\n      key={1}\n      time={props.startTime}\n      onTimeChange={date => handleStartTimeChange(props, timeSheetContext, date)} />,\n    <TimeCell\n      key={2}\n      time={props.endTime}\n      onTimeChange={date => handleEndTimeChange(props, timeSheetContext, date)} />,\n    <NumberCell\n      key={3}\n      number={props.breaksLength}\n      step={15}\n      onNumberChange={number => handleBreaksLengthChange(props, timeSheetContext, number)} />,\n    <NumberCell\n      key={4}\n      number={getTotalHoursWorking(props)}\n      readOnly={true}/>,\n    checkBoxCell\n  ]);\n}\n\nfunction getTotalHoursWorking(props: DayColumnProps): number {\n  if (props.isDayOff) {\n    return 0;\n  }\n\n  return props.endTime.getHours() - props.startTime.getHours()\n         - props.breaksLength / 60\n         + (props.endTime.getMinutes() - props.startTime.getMinutes()) / 60\n         + (props.endTime.getSeconds() - props.startTime.getSeconds()) / (60 * 60)\n}\n\nfunction handleStartTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.StartTimeUpdate, newTime)\n}\n\nfunction handleEndTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.EndTimeUpdate, newTime)\n}\n\nfunction handleBreaksLengthChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newNumber: number) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.BreaksLengthUpdate, newNumber)\n}\n\nfunction handleIsDayOffChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newIsChecked: boolean) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.IsDayOffUpdate, newIsChecked)\n}\n\nfunction handleChange<T>(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  actionType: TimeSheetActionType,\n  newValue: T) {\n\n  if (timeSheetContext === null) {\n    throw new Error('Context cannot be null in number change')\n  }\n\n  timeSheetContext.dispatch({\n    personName: props.personName,\n    dow: props.dow,\n    type: actionType,\n    value: newValue\n  })\n}\n\nexport default GetDayColumn;\nexport type { DayColumnProps };\nexport { getTotalHoursWorking }; // hack\n","import React, { useContext } from 'react';\nimport { DayColumnProps, getTotalHoursWorking } from './DayColumn'\nimport DayOfWeek, { daysOfWeek } from './DayOfWeek'\nimport GetDayColumn from './DayColumn';\nimport { TimeSheetContext, TimeSheetContextData } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\n\nconst headerRowName = [\n  'PERSON',\n]\nconst bodyRowNames = [\n  'DAY',\n  'START',\n  'END',\n  'UNPAID BREAKS (MINUTES)',\n  'DAILY HOURS TOTAL',\n  'IS DAY OFF?'\n]\n\ninterface TimeTableProps {\n  personName: string,\n  date: Date,\n  dayColumnsProps: {[dow in DayOfWeek]: DayColumnProps}\n}\n\nfunction TimeTable(props: TimeTableProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  const dayColumnsElements = daysOfWeek\n    .map(dow => props.dayColumnsProps[dow])\n    .map(props => GetDayColumn(props))\n\n  const transposedDayColumnsElements = transpose(dayColumnsElements)\n  const bodyRows = bodyRowNames.map((rowName, rowNum) => {\n    return {\n      rowName: rowName,\n      transposedDayColumnElements: transposedDayColumnsElements[rowNum]\n    }})\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th scope='row'>\n            {headerRowName}\n            <button onClick={() => deleteTimeTable(timeSheetContext, props.personName)}>Delete</button>\n          </th>\n          <td colSpan={daysOfWeek.length}>\n            {props.personName}: {getTotalHoursWorkingInWeek(props)} hours\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {bodyRows.map(row => (\n        <tr key={row.rowName}>\n          <th scope='row'>\n            {row.rowName}\n          </th>\n          {row.transposedDayColumnElements.map((cell, i) => (\n          <td key={i}>\n            {cell}\n          </td>))}\n        </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction transpose<T>(array: Array<Array<T>>) {\n  return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n}\n\nfunction deleteTimeTable(context: TimeSheetContextData, personName: string) {\n  context.dispatch({\n    type: TimeSheetActionType.DeleteTimeTable,\n    personName: personName\n  })\n}\n\nfunction getTotalHoursWorkingInWeek(props: TimeTableProps): number {\n  return daysOfWeek\n    .map(dow => getTotalHoursWorking(props.dayColumnsProps[dow]))\n    .reduce((hoursSoFar, hoursToday) => hoursSoFar + hoursToday, 0)\n}\n\nexport default TimeTable;\nexport type { TimeTableProps };\nexport { getTotalHoursWorkingInWeek }; // hack\n","import React, { FormEvent, useState, SetStateAction, useRef } from 'react';\nimport TimeTable, { getTotalHoursWorkingInWeek } from './TimeTable'\nimport { useTimeSheetReducer, TimeSheetAction, TimeSheetActionType } from './state/TimeSheetReducer';\nimport { TimeSheetState } from './state/TimeSheetState';\nimport { saveTimeSheetToLocalStorage, deleteTimeSheetFromLocalStorage } from './store/TimeSheetStore';\nimport { toReadableWeekString } from './Utils';\n\ninterface TimeSheetProps {\n  date: Date,\n  addTimeSheetDate: (date: Date) => void,\n  deleteTimeSheetDate: (date: Date) => void,\n  isDeletedTimeSheetDate: boolean\n}\n\ninterface TimeSheetContextData {\n  weekStartDate: Date,\n  dispatch: React.Dispatch<TimeSheetAction>\n}\n\nconst TimeSheetContext = React.createContext<TimeSheetContextData | null>(null)\nconst defaultAddPersonValue = ''\n\nfunction TimeSheet(props: TimeSheetProps) {\n  const [state, dispatch] = useTimeSheetReducer(props)\n  const timeSheetContext: TimeSheetContextData = {\n    weekStartDate: state.weekStartDate,\n    dispatch: dispatch\n  }\n\n  const [addPersonValue, setAddPersonValue] = useState(defaultAddPersonValue)\n  const addPersonInputRef = useRef<HTMLInputElement | null>(null)\n\n  return (\n    <TimeSheetContext.Provider value={timeSheetContext}>\n      <h2>\n        Week: {toReadableWeekString(props.date)}\n      </h2>\n      <button disabled={!canSaveTimeSheet(state.weekStartDate, state)} onClick={() => saveTimeSheet(state.weekStartDate, state, props.addTimeSheetDate)}>\n        Save Time Sheet To Local Storage\n      </button>\n      <button disabled={!canDeleteTimeSheet(state.weekStartDate, props.isDeletedTimeSheetDate)} onClick={() => deleteTimeSheet(state.weekStartDate, props.deleteTimeSheetDate)}>\n        Delete Time Sheet From Local Storage\n      </button>\n      <form onSubmit={(evt) => addTimeTable(evt, state, timeSheetContext, addPersonValue, setAddPersonValue, addPersonInputRef)}>\n        <label htmlFor='person'>\n          Person:\n        </label>\n        <input name='person' type=\"text\" ref={addPersonInputRef} value={addPersonValue} onChange={(evt) => setAddPersonValue(evt.target.value)} />\n        <input type=\"submit\" value=\"Add new timetable\" />\n      </form>\n      <p>\n        Total hours working in week: {getAllPeopleTotalHoursWorking(state)}\n      </p>\n      {Object.keys(state.timeTablePropsMap).map(personName => (\n      <div className='container' key={personName}>\n        {React.createElement(\n          TimeTable,\n          state.timeTablePropsMap[personName])}\n      </div>))}\n    </TimeSheetContext.Provider>\n  );\n}\n\nfunction canSaveTimeSheet(date: Date, state: TimeSheetState) {\n  return true\n}\n\nfunction canDeleteTimeSheet(date: Date, isDeletedTimeSheetDate: boolean) {\n  return !isDeletedTimeSheetDate\n}\n\nfunction saveTimeSheet(\n    date: Date,\n    state: TimeSheetState,\n    addTimeSheetDate: React.Dispatch<Date>) {\n\n  saveTimeSheetToLocalStorage(date, state)\n  addTimeSheetDate(date)\n\n  window.alert(`Successfully saved time sheet for ${toReadableWeekString(date)}`)\n}\n\nfunction deleteTimeSheet(\n    date: Date,\n    deleteTimeSheetDate: React.Dispatch<Date>) {\n\n  const confirmedCancel = window.confirm(`Are you sure you want to delete time sheet save data for ${toReadableWeekString(date)}?`)\n\n  if (confirmedCancel) {\n    deleteTimeSheetDate(date)\n    deleteTimeSheetFromLocalStorage(date)\n  \n    window.alert(`Successfully deleted time sheet save data for ${toReadableWeekString(date)}`)\n  }\n}\n\nfunction addTimeTable(\n    event: FormEvent<HTMLFormElement>,\n    state: TimeSheetState,\n    context: TimeSheetContextData,\n    personName: string,\n    setAddPersonValue: React.Dispatch<SetStateAction<string>>,\n    addPersonInputRef: React.MutableRefObject<HTMLInputElement | null>) {\n\n  event.preventDefault()\n\n  if (personName === '') {\n    alert('Cannot add timetable for nameless person')\n    return\n  }\n  if (Object.keys(state.timeTablePropsMap).some(person => person.toLowerCase() === personName.toLowerCase())) {\n    alert(`Timetable already exists for person ${personName}`)\n    return\n  }\n\n  context.dispatch({\n    type: TimeSheetActionType.AddTimeTable,\n    personName: personName\n  })\n\n  setAddPersonValue(defaultAddPersonValue)\n  addPersonInputRef.current!.focus()\n}\n\nfunction getAllPeopleTotalHoursWorking(state: TimeSheetState): number {\n  return Object.values(state.timeTablePropsMap)\n    .map(timeTableProp => getTotalHoursWorkingInWeek(timeTableProp))\n    .reduce((hoursSoFar, hoursToday) => hoursSoFar + hoursToday, 0)\n}\n\nexport default TimeSheet\nexport { TimeSheetContext }\nexport type { TimeSheetContextData, TimeSheetProps }","import React from 'react';\nimport TimeSheet from '../TimeSheet';\nimport { useParams, Redirect } from 'react-router-dom';\n\ninterface TimeSheetPageParams {\n  date: string\n}\n\ninterface TimeSheetPageProps {\n  isDeletedTimeSheetDate: (date: Date) => boolean,\n  addTimeSheetDate: (date: Date) => void,\n  deleteTimeSheetDate: (date: Date) => void,\n}\n\nfunction TimeSheetPage(props: TimeSheetPageProps) {\n  const pageParams: TimeSheetPageParams = useParams<TimeSheetPageParams>()\n  const date: Date = new Date(pageParams.date)\n\n  return (\n    <>\n      {props.isDeletedTimeSheetDate(date) &&\n        <Redirect to={`/`} />\n      }\n      <section className=\"time-sheet\">\n        <TimeSheet date={date}\n          addTimeSheetDate={props.addTimeSheetDate}\n          deleteTimeSheetDate={props.deleteTimeSheetDate}\n          isDeletedTimeSheetDate={props.isDeletedTimeSheetDate(date)} />\n      </section>\n    </>\n  );\n}\n\nexport default TimeSheetPage;\n","import React, { useState, SetStateAction } from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport TimeSheetPage from './pages/TimeSheetPage';\nimport { getSavedTimeSheetDates, addSavedTimeSheetDate, deleteSavedTimeSheetDate } from './store/TimeSheetStore';\nimport { areEqual, startOfWeek, toReadableWeekString, includes } from './Utils';\n\nconst baseUrl = '/timesheet-maker'\n\nfunction App() {\n  const [timeSheetDates, setTimeSheetDates] = useState(getSavedTimeSheetDates())\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            {timeSheetDates.sort().map(date => \n            <li key={date.toISOString()}>\n              <Link to={`/${date.toISOString()}`}>\n                {toReadableWeekString(date, true)}\n              </Link>\n            </li>)}\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path='/:date'>\n            <TimeSheetPage isDeletedTimeSheetDate={date => isDeletedTimeSheetDate(timeSheetDates, date)}\n              addTimeSheetDate={date => addTimeSheetDate(timeSheetDates, setTimeSheetDates, date)}\n              deleteTimeSheetDate={date => deleteTimeSheetDate(timeSheetDates, setTimeSheetDates, date)} />\n          </Route>\n          <Route path=''>\n            <Home timeSheetDates={timeSheetDates}\n              addTimeSheetDate={date => addTimeSheetDate(timeSheetDates, setTimeSheetDates, date)} />\n          </Route>\n        </Switch>\n      </>\n    </HashRouter>\n  );\n}\n\nfunction addTimeSheetDate(\n    timeSheetDates: Date[],\n    setTimeSheetDates: React.Dispatch<SetStateAction<Date[]>>,\n    date: Date): void {\n  \n  const startOfWeekDate = startOfWeek(date)\n  if (!includes(timeSheetDates, startOfWeekDate)) {\n    addSavedTimeSheetDate(startOfWeekDate)\n    setTimeSheetDates(getSavedTimeSheetDates())\n  }\n}\n\nfunction deleteTimeSheetDate(\n  timeSheetDates: Date[],\n  setTimeSheetDates: React.Dispatch<SetStateAction<Date[]>>,\n  date: Date): void {\n    \n  const startOfWeekDate = startOfWeek(date)\n  if (includes(timeSheetDates, startOfWeekDate)) {\n    deleteSavedTimeSheetDate(startOfWeekDate)\n    setTimeSheetDates(getSavedTimeSheetDates())\n  }\n}\n\nfunction isDeletedTimeSheetDate(\n  timeSheetDates: Date[],\n  date: Date): boolean {\n    \n  const startOfWeekDate = startOfWeek(date)\n  return !includes(timeSheetDates, startOfWeekDate)\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}