{"version":3,"sources":["Utils.tsx","store/TimeSheetStore.tsx","pages/Home.tsx","cells/TimeCell.tsx","cells/NumberCell.tsx","cells/DayOfWeekCell.tsx","DayOfWeek.tsx","state/TimeSheetReducer.tsx","state/TimeSheetState.tsx","DayColumn.tsx","TimeTable.tsx","TimeSheet.tsx","pages/TimeSheetPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["areEqual","date","otherDate","toISOString","parseJson","jsonString","JSON","parse","key","value","toLowerCase","endsWith","Date","startOfWeek","addTime","getDay","setHours","setMinutes","setSeconds","setMilliseconds","days","hours","minutes","seconds","getTime","toReadableDateString","includeYear","yearSuffix","getFullYear","getDate","getMonth","timeSheetDatesKey","getSavedTimeSheetDates","savedDatesString","localStorage","getItem","map","dateString","setSavedTimeSheetDates","dates","forEach","validateIsStartOfWeekDate","setItem","stringify","addSavedTimeSheetDate","savedDates","some","savedDate","existsTimeSheetInLocalStorage","deleteTimeSheetFromLocalStorage","filter","deleteSavedTimeSheetDate","removeItem","Error","Home","useState","now","setDate","isAddedTimeSheet","setIsAddedTimeSheet","to","baseUrl","onSubmit","evt","event","preventDefault","addTimeSheet","htmlFor","name","type","dateToInputValue","onChange","inputDate","target","valueAsDate","newDate","getTimezoneOffset","onDateChange","year","toString","month","padStart","dayOfMonth","TimeCell","props","className","min","max","step","time","getHours","getMinutes","getSeconds","timeToInputValue","placeholder","inputTime","newTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","onTimeChange","updateTimeFromInput","handleChangeFunction","undefined","onNumberChange","valueAsNumber","readOnly","NumberCell","number","DayOfWeekCell","DayOfWeek","dow","TimeSheetActionType","daysOfWeek","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","initialTimeTableProps","personName","dayColumnsProps","reduce","startTime","timeFromDate","endTime","breaksLength","initialDayColumnProps","useTimeSheetReducer","useReducer","state","action","reducer","weekStartDate","timeTablePropsMap","initialState","dispatch","useEffect","localState","localStateString","loadTimeSheetFromLocalStorage","SetState","StartTimeUpdate","EndTimeUpdate","BreaksLengthUpdate","valueUpdater","AddTimeTable","updatedState","cloneDeep","timeTableAdder","DeleteTimeTable","timeTableDeleter","dayColumn","updatedDayColumn","getTotalHoursWorking","handleChange","timeSheetContext","actionType","newValue","GetDayColumn","useContext","TimeSheetContext","React","Children","toArray","handleStartTimeChange","handleEndTimeChange","newNumber","handleBreaksLengthChange","headerRowName","bodyRowNames","getTotalHoursWorkingInWeek","hoursSoFar","hoursToday","TimeTable","array","dayColumnsElements","transposedDayColumnsElements","_","colIndex","row","bodyRows","rowName","rowNum","transposedDayColumnElements","scope","onClick","context","colSpan","length","cell","i","createContext","canDeleteTimeSheet","isSaved","TimeSheet","addPersonValue","setAddPersonValue","addPersonInputRef","useRef","setIsSaved","Provider","disabled","saveTimeSheetToLocalStorage","saveTimeSheet","deleteTimeSheet","alert","current","focus","addTimeTable","ref","Object","keys","createElement","TimeSheetPage","pageParams","useParams","App","savedTimeSheetDates","sort","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c929195f.chunk.js","sourcesContent":["function areEqual(date: Date, otherDate: Date): boolean {\n  return date.toISOString() === otherDate.toISOString()\n}\n\nfunction parseJson<T>(jsonString: string): T {\n  return JSON.parse(jsonString, (key, value) => {\n    if (key.toLowerCase().endsWith('date') || key.toLowerCase().endsWith('time')) {\n      return new Date(value)\n    }\n    return value\n  })\n}\n\nfunction startOfWeek(date: Date): Date {\n  let startOfWeek = addTime(date, - date.getDay())\n  startOfWeek.setHours(0)\n  startOfWeek.setMinutes(0)\n  startOfWeek.setSeconds(0)\n  startOfWeek.setMilliseconds(0)\n  return startOfWeek\n}\n\nfunction timeFromDate(date: Date, hours: number, minutes: number, seconds: number): Date {\n  let time: Date = new Date(date)\n  time.setHours(hours)\n  time.setMinutes(minutes)\n  time.setSeconds(seconds)\n  time.setMilliseconds(0)\n  return time\n}\n\nfunction addTime(date: Date, days?: number, hours?: number,\n    minutes?: number, seconds?: number): Date {\n  return new Date(date.getTime()\n    + (days ?? 0) * 24 * 60 * 60 * 1000 \n    + (hours ?? 0) * 60 * 60 * 1000\n    + (minutes ?? 0) * 60 * 1000\n    + (seconds ?? 0) * 1000\n  )\n}\n\nfunction toReadableDateString(date: Date, includeYear=false): string {\n  const yearSuffix = includeYear ? `/${date.getFullYear()}` : ''\n  return `${date.getDate()}/${date.getMonth() + 1}` + yearSuffix\n}\n\nexport {\n  areEqual,\n  parseJson,\n  startOfWeek,\n  timeFromDate,\n  addTime,\n  toReadableDateString\n}","import { parseJson, areEqual, startOfWeek } from '../Utils'\nimport { TimeSheetState } from '../state/TimeSheetState'\n\nconst timeSheetDatesKey: string = 'timeSheetDates'\n\nfunction getSavedTimeSheetDates(): Array<Date> {\n  const savedDatesString = localStorage.getItem(timeSheetDatesKey)\n  if (savedDatesString === null) {\n    return []\n  }\n  return parseJson<Array<string>>(savedDatesString).map(dateString => new Date(dateString))\n}\n\nfunction setSavedTimeSheetDates(dates: Array<Date>): void {\n  dates.forEach(validateIsStartOfWeekDate)\n  localStorage.setItem(timeSheetDatesKey, JSON.stringify(dates))\n}\n\nfunction addSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  if (!savedDates.some(savedDate => areEqual(date, savedDate))) {\n    setSavedTimeSheetDates([date, ...savedDates])\n  }\n}\n\nfunction deleteSavedTimeSheetDate(date: Date): void {\n  validateIsStartOfWeekDate(date)\n\n  const savedDates = getSavedTimeSheetDates()\n  setSavedTimeSheetDates(savedDates.filter(savedDate => !areEqual(date, savedDate)))\n}\n\nfunction saveTimeSheetToLocalStorage(date: Date, state: TimeSheetState): void {\n  validateIsStartOfWeekDate(date)\n\n  localStorage.setItem(`timeSheet-${date.toISOString()}`, JSON.stringify(state))\n  addSavedTimeSheetDate(date)\n}\n\nfunction existsTimeSheetInLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  return getSavedTimeSheetDates().some(savedDate => areEqual(date, savedDate))\n    || localStorage.getItem(`timeSheet-${date.toISOString()}`) !== null\n}\n\nfunction loadTimeSheetFromLocalStorage(date: Date): TimeSheetState | null {\n  validateIsStartOfWeekDate(date)\n\n  const localStateString = localStorage.getItem(`timeSheet-${date.toISOString()}`)\n  if (localStateString === null) {\n    return null\n  }\n\n  return parseJson(localStateString)\n}\n\nfunction deleteTimeSheetFromLocalStorage(date: Date): boolean {\n  validateIsStartOfWeekDate(date)\n\n  deleteSavedTimeSheetDate(date)\n\n  if (!existsTimeSheetInLocalStorage(date)) {\n    return false\n  }\n\n  localStorage.removeItem(`timeSheet-${date.toISOString()}`)\n  return true\n}\n\nfunction validateIsStartOfWeekDate(date: Date): void {\n  if (!areEqual(date, startOfWeek(date))) {\n    throw new Error(`Date ${date} does not match start of week ${startOfWeek(date)}`)\n  }\n}\n\nexport {\n  getSavedTimeSheetDates,\n  addSavedTimeSheetDate,\n  saveTimeSheetToLocalStorage,\n  existsTimeSheetInLocalStorage,\n  loadTimeSheetFromLocalStorage,\n  deleteTimeSheetFromLocalStorage\n}","import React, { useState } from 'react';\nimport { addSavedTimeSheetDate } from '../store/TimeSheetStore';\nimport { Redirect } from 'react-router-dom';\nimport { addTime, startOfWeek } from '../Utils';\nimport { baseUrl } from '../App';\n\nfunction Home() {\n  const [date, setDate] = useState(new Date(Date.now()))\n  const [isAddedTimeSheet, setIsAddedTimeSheet] = useState(false)\n\n  return (\n    <>\n      {isAddedTimeSheet &&\n        <Redirect to={`${baseUrl}/${date.toISOString()}`} />\n      }\n      <form onSubmit={(evt) => addTimeSheet(evt, date, setIsAddedTimeSheet)}>\n        <label htmlFor='date'>\n          Date:\n        </label>\n        <input name='date' type=\"date\" value={dateToInputValue(date)} onChange={(evt) => onDateChange(evt, setDate)} />\n        <input type=\"submit\" value=\"Add new time sheet\" />\n      </form>\n    </>\n  );\n}\n\nfunction addTimeSheet(\n    event: React.FormEvent<HTMLFormElement>,\n    date: Date,\n    setIsAddedTimeSheet: React.Dispatch<React.SetStateAction<boolean>>) {\n\n  event.preventDefault()\n\n  const startOfWeekDate = startOfWeek(date)\n  addSavedTimeSheetDate(startOfWeekDate)\n\n  setIsAddedTimeSheet(true)\n}\n\nfunction dateToInputValue(date: Date): string {\n  let year: string = date.getFullYear().toString()\n  let month: string = (date.getMonth() + 1).toString().padStart(2, '0')\n  let dayOfMonth: string = date.getDate().toString().padStart(2, '0')\n  return `${year}-${month}-${dayOfMonth}`\n}\n\nfunction onDateChange(\n    event: React.ChangeEvent<HTMLInputElement>,\n    setDate: React.Dispatch<React.SetStateAction<Date>>) {\n  const inputDate = event.target.valueAsDate\n  if (inputDate === null) {\n    throw new Error(`Failed to set date in ${Home.name}`)\n  }\n\n  const newDate = addTime(inputDate, 0, 0, inputDate.getTimezoneOffset())\n  setDate(newDate)\n}\n\nexport default Home;\n","import React from 'react';\n\ntype TimeCellProps = {\n  time: Date,\n  onTimeChange: React.Dispatch<Date>\n}\n\nfunction TimeCell(props: TimeCellProps) {\n  return (\n    <input\n      className=\"timeCellInput\"\n      type=\"time\"\n      min=\"08:00:00\"\n      max=\"21:00:00\"\n      step={15 * 60}\n      value={timeToInputValue(props.time)}\n      placeholder=\"Set the time\"\n      onChange={(evt) => updateTimeFromInput(evt)}\n    />\n  );\n\n  function timeToInputValue(time: Date): string {\n    let hours: string = time.getHours().toString().padStart(2, '0')\n    let minutes: string = time.getMinutes().toString().padStart(2, '0')\n    let seconds: string = time.getSeconds().toString().padStart(2, '0')\n    return `${hours}:${minutes}:${seconds}`\n  }\n\n  function updateTimeFromInput(evt: React.ChangeEvent<HTMLInputElement>): void {\n    let inputTime: Date | null = evt.target.valueAsDate\n    if (inputTime === null) {\n      return\n    }\n\n    let newTime: Date = new Date(props.time)\n    newTime.setHours(inputTime.getUTCHours())\n    newTime.setMinutes(inputTime.getUTCMinutes())\n    newTime.setSeconds(inputTime.getUTCSeconds())\n    newTime.setMilliseconds(inputTime.getUTCMilliseconds())\n    props.onTimeChange(newTime)\n  }\n}\n\nexport default TimeCell;\nexport type { TimeCellProps };","import React from 'react';\n\ninterface NumberCellProps {\n  number: number,\n  onNumberChange?: React.Dispatch<number>,\n  readOnly?: boolean,\n  step?: number\n}\n\nfunction NumberCell(props: NumberCellProps) {\n\n  return (\n    <input\n      className=\"numberCellInput\"\n      type=\"number\"\n      min=\"0\"\n      step={props.step}\n      readOnly={props.readOnly}\n      value={props.number}\n      placeholder=\"Set the time\"\n      onChange={handleChangeFunction(props)}\n    />\n  );\n}\n\nfunction handleChangeFunction(props: NumberCellProps) {\n  if (props.onNumberChange === undefined) {\n    if (!props.readOnly) {\n      throw new Error('No number change handler provided for non-readonly input')\n    }\n    return undefined\n  }\n\n  return function(evt: React.ChangeEvent<HTMLInputElement>) {\n    props.onNumberChange!(evt.target.valueAsNumber)\n  }\n}\n\nexport default NumberCell;\n","import React from 'react';\nimport DayOfWeek from '../DayOfWeek';\n\ninterface DayOfWeekCellProps {\n  dow: DayOfWeek,\n}\n\nfunction DayOfWeekCell(props: DayOfWeekCellProps) {\n  const daysOfWeek = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n\n  return (\n    <input\n      className=\"dayOfWeekCellInput\"\n      type='text'\n      readOnly={true}\n      value={daysOfWeek[props.dow]}\n    />\n  );\n}\n\nexport default DayOfWeekCell;\n","enum DayOfWeek {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nconst daysOfWeek = [\n  DayOfWeek.Sunday,\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n  DayOfWeek.Saturday\n]\n\nexport default DayOfWeek;\nexport { daysOfWeek }\n","import React, { useReducer, useEffect } from 'react';\nimport DayOfWeek from '../DayOfWeek'\nimport { cloneDeep } from \"lodash\"\nimport { TimeSheetProps } from '../TimeSheet';\nimport { TimeSheetState, initialState, initialTimeTableProps } from './TimeSheetState';\nimport { loadTimeSheetFromLocalStorage } from '../store/TimeSheetStore';\n\ninterface TimeSheetAction {\n  type: TimeSheetActionType,\n  personName?: string,\n  dow?: DayOfWeek,\n  value?: any\n}\n\nenum TimeSheetActionType {\n  StartTimeUpdate,\n  EndTimeUpdate,\n  BreaksLengthUpdate,\n  SetState,\n  AddTimeTable,\n  DeleteTimeTable\n}\n\nfunction useTimeSheetReducer(props: TimeSheetProps): [TimeSheetState, React.Dispatch<TimeSheetAction>] {\n  const [state, dispatch] = useReducer(\n    (state: TimeSheetState, action: TimeSheetAction) => reducer(props, state, action),\n    initialState(props))\n\n  useEffect(() => {\n    const localState = loadTimeSheetFromLocalStorage(state.weekStartDate)\n    if (localState !== null) {\n      dispatch({\n        type: TimeSheetActionType.SetState,\n        value: localState\n      })\n    }\n    // return () => {\n    //   console.log('Setting state')\n    //   localStorage.setItem('state', JSON.stringify(state))\n    // };\n  // Run only on mount and un-mount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return [state, dispatch]\n}\n\nfunction reducer(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n    case TimeSheetActionType.EndTimeUpdate:\n    case TimeSheetActionType.BreaksLengthUpdate:\n      return valueUpdater(state, action)\n    case TimeSheetActionType.SetState:\n      return action.value as TimeSheetState\n    case TimeSheetActionType.AddTimeTable:\n      return timeTableAdder(props, state, action)\n    case TimeSheetActionType.DeleteTimeTable:\n      return timeTableDeleter(state, action)\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${reducer}`)\n  }\n}\n\nfunction valueUpdater(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet update')\n  }\n  if (action.dow === undefined) {\n    throw new Error('Day of week is undefined for time sheet update')\n  }\n\n  const timeTable = state.timeTablePropsMap[action.personName]\n  const dayColumn = timeTable.dayColumnsProps[action.dow]\n  \n  const updatedDayColumn = {...dayColumn}\n  switch (action.type) {\n    case TimeSheetActionType.StartTimeUpdate:\n      updatedDayColumn.startTime = action.value\n      break\n    case TimeSheetActionType.EndTimeUpdate:\n      updatedDayColumn.endTime = action.value\n      break\n    case TimeSheetActionType.BreaksLengthUpdate:\n      updatedDayColumn.breaksLength = action.value\n      break\n    default:\n      throw new Error(`Action type ${action.type} is not supported by ${valueUpdater}`)\n  }\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName].dayColumnsProps[action.dow]\n    = updatedDayColumn\n  return updatedState\n}\n\nfunction timeTableAdder(\n    props: TimeSheetProps,\n    state: TimeSheetState,\n    action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet add')\n  }\n  if (action.personName in state.timeTablePropsMap) {\n    throw new Error(`Person name ${action.personName} cannot be added because they already have a time table`)\n  }\n\n  const updatedState = cloneDeep(state)\n  updatedState.timeTablePropsMap[action.personName] = initialTimeTableProps(props, action.personName)\n  return updatedState\n}\n\nfunction timeTableDeleter(state: TimeSheetState, action: TimeSheetAction): TimeSheetState {\n  if (action.personName === undefined) {\n    throw new Error('Person name is undefined for time sheet delete')\n  }\n  if (!(action.personName in state.timeTablePropsMap)) {\n    throw new Error(`Person name ${action.personName} cannot be deleted because they have no time table`)\n  }\n\n  const updatedState = cloneDeep(state)\n  delete updatedState.timeTablePropsMap[action.personName]\n  return updatedState\n}\n\nexport type { TimeSheetAction }\nexport { useTimeSheetReducer, TimeSheetActionType }","import { TimeTableProps } from '../TimeTable'\nimport DayOfWeek, { daysOfWeek } from '../DayOfWeek'\nimport { DayColumnProps } from '../DayColumn';\nimport { TimeSheetProps } from '../TimeSheet';\nimport { timeFromDate, addTime, startOfWeek } from '../Utils';\n\n\ninterface TimeSheetState {\n  weekStartDate: Date,\n  timeTablePropsMap: {[personName: string]: TimeTableProps}\n}\n\nfunction initialState(props: TimeSheetProps): TimeSheetState {\n  return {\n    weekStartDate: startOfWeek(props.date),\n    timeTablePropsMap: {}\n  }\n}\n\nfunction initialTimeTableProps(props: TimeSheetProps, personName: string): TimeTableProps {\n  return {\n    personName: personName,\n    date: props.date,\n    dayColumnsProps: daysOfWeek.reduce((map, dow) => {\n      map[dow] = initialDayColumnProps(props, personName, dow)\n      return map\n    }, {} as {[dow in DayOfWeek]?: DayColumnProps}\n    ) as {[dow in DayOfWeek]: DayColumnProps}\n  }\n}\n\nfunction initialDayColumnProps(props: TimeSheetProps,\n    personName: string, dow: DayOfWeek): DayColumnProps {\n  const startTime = addTime(timeFromDate(props.date, 8, 0, 0), dow)\n  const endTime = addTime(startTime, 0, 0, 30)\n\n  return {\n    personName: personName,\n    dow: dow,\n    startTime: startTime,\n    endTime: endTime,\n    breaksLength: 0,\n  }\n}\n\nexport type { TimeSheetState }\nexport {\n  initialState,\n  initialTimeTableProps,\n}","import React, { useContext } from 'react';\nimport TimeCell from './cells/TimeCell'\nimport NumberCell from './cells/NumberCell'\nimport DayOfWeekCell from './cells/DayOfWeekCell';\nimport DayOfWeek from './DayOfWeek';\nimport { TimeSheetContextData, TimeSheetContext } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\n\ninterface DayColumnProps {\n  personName: string,\n  dow: DayOfWeek,\n  startTime: Date,\n  endTime: Date,\n  breaksLength: number,\n}\n\nfunction GetDayColumn(props: DayColumnProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  return React.Children.toArray([\n    <DayOfWeekCell key={0} dow={props.dow} />,\n    <TimeCell\n      key={1}\n      time={props.startTime}\n      onTimeChange={date => handleStartTimeChange(props, timeSheetContext, date)} />,\n    <TimeCell\n      key={2}\n      time={props.endTime}\n      onTimeChange={date => handleEndTimeChange(props, timeSheetContext, date)} />,\n    <NumberCell\n      key={3}\n      number={props.breaksLength}\n      step={15}\n      onNumberChange={number => handleBreaksLengthChange(props, timeSheetContext, number)} />,\n    <NumberCell\n      key={4}\n      number={getTotalHoursWorking(props)}\n      readOnly={true}/>\n  ]);\n}\n\nfunction getTotalHoursWorking(props: DayColumnProps): number {\n  return props.endTime.getHours() - props.startTime.getHours()\n         - props.breaksLength / 60\n         + (props.endTime.getMinutes() - props.startTime.getMinutes()) / 60\n         + (props.endTime.getSeconds() - props.startTime.getSeconds()) / (60 * 60)\n}\n\nfunction handleStartTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.StartTimeUpdate, newTime)\n}\n\nfunction handleEndTimeChange(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  newTime: Date) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.EndTimeUpdate, newTime)\n}\n\nfunction handleBreaksLengthChange(\n    props: DayColumnProps,\n    timeSheetContext: TimeSheetContextData | null,\n    newNumber: number) {\n\n  handleChange(props, timeSheetContext, TimeSheetActionType.BreaksLengthUpdate, newNumber)\n}\n\nfunction handleChange<T>(\n  props: DayColumnProps,\n  timeSheetContext: TimeSheetContextData | null,\n  actionType: TimeSheetActionType,\n  newValue: T) {\n\n  if (timeSheetContext === null) {\n    throw new Error('Context cannot be null in number change')\n  }\n\n  timeSheetContext.dispatch({\n    personName: props.personName,\n    dow: props.dow,\n    type: actionType,\n    value: newValue\n  })\n}\n\nexport default GetDayColumn;\nexport type { DayColumnProps };\nexport { getTotalHoursWorking }; // hack\n","import React, { useContext } from 'react';\nimport { DayColumnProps, getTotalHoursWorking } from './DayColumn'\nimport DayOfWeek, { daysOfWeek } from './DayOfWeek'\nimport GetDayColumn from './DayColumn';\nimport { TimeSheetContext, TimeSheetContextData } from './TimeSheet';\nimport { TimeSheetActionType } from './state/TimeSheetReducer';\n\nconst headerRowName = [\n  'PERSON',\n]\nconst bodyRowNames = [\n  'DAY',\n  'START',\n  'END',\n  'UNPAID BREAKS',\n  'DAILY HOURS TOTAL'\n]\n\ninterface TimeTableProps {\n  personName: string,\n  date: Date,\n  dayColumnsProps: {[dow in DayOfWeek]: DayColumnProps}\n}\n\nfunction TimeTable(props: TimeTableProps) {\n  const timeSheetContext = useContext(TimeSheetContext)\n  if (timeSheetContext === null) {\n    throw new Error(`Time sheet context is null in ${GetDayColumn.name}`)\n  }\n\n  const dayColumnsElements = daysOfWeek\n    .map(dow => props.dayColumnsProps[dow])\n    .map(props => GetDayColumn(props))\n\n  const transposedDayColumnsElements = transpose(dayColumnsElements)\n  const bodyRows = bodyRowNames.map((rowName, rowNum) => {\n    return {\n      rowName: rowName,\n      transposedDayColumnElements: transposedDayColumnsElements[rowNum]\n    }})\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th scope='row'>\n            {headerRowName}\n            <button onClick={() => deleteTimeTable(timeSheetContext, props.personName)}>Delete</button>\n          </th>\n          <td colSpan={daysOfWeek.length}>\n            {props.personName}: {getTotalHoursWorkingInWeek(props)} hours\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        {bodyRows.map(row => (\n        <tr key={row.rowName}>\n          <th scope='row'>\n            {row.rowName}\n          </th>\n          {row.transposedDayColumnElements.map((cell, i) => (\n          <td key={i}>\n            {cell}\n          </td>))}\n        </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction transpose<T>(array: Array<Array<T>>) {\n  return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n}\n\nfunction deleteTimeTable(context: TimeSheetContextData, personName: string) {\n  context.dispatch({\n    type: TimeSheetActionType.DeleteTimeTable,\n    personName: personName\n  })\n}\n\nfunction getTotalHoursWorkingInWeek(props: TimeTableProps): number {\n  return daysOfWeek\n    .map(dow => getTotalHoursWorking(props.dayColumnsProps[dow]))\n    .reduce((hoursSoFar, hoursToday) => hoursSoFar + hoursToday, 0)\n}\n\nexport default TimeTable;\nexport type { TimeTableProps };\n","import React, { FormEvent, useState, SetStateAction, useRef } from 'react';\nimport TimeTable from './TimeTable'\nimport { useTimeSheetReducer, TimeSheetAction, TimeSheetActionType } from './state/TimeSheetReducer';\nimport { TimeSheetState } from './state/TimeSheetState';\nimport { saveTimeSheetToLocalStorage, deleteTimeSheetFromLocalStorage, existsTimeSheetInLocalStorage } from './store/TimeSheetStore';\n\ninterface TimeSheetProps {\n  date: Date,\n}\n\ninterface TimeSheetContextData {\n  weekStartDate: Date,\n  dispatch: React.Dispatch<TimeSheetAction>\n}\n\nconst TimeSheetContext = React.createContext<TimeSheetContextData | null>(null)\nconst defaultAddPersonValue = ''\n\nfunction TimeSheet(props: TimeSheetProps) {\n  const [state, dispatch] = useTimeSheetReducer(props)\n  const timeSheetContext: TimeSheetContextData = {\n    weekStartDate: state.weekStartDate,\n    dispatch: dispatch\n  }\n\n  const [addPersonValue, setAddPersonValue] = useState(defaultAddPersonValue)\n  const addPersonInputRef = useRef<HTMLInputElement | null>(null)\n\n  const [isSaved, setIsSaved] = useState(initialIsSavedTimeSheet(state.weekStartDate))\n\n  return (\n    <TimeSheetContext.Provider value={timeSheetContext}>\n      <button disabled={!canSaveTimeSheet(state.weekStartDate, state)} onClick={() => saveTimeSheet(state.weekStartDate, state, setIsSaved)}>\n        Save Time Sheet To Local Storage\n      </button>\n      <button disabled={!canDeleteTimeSheet(state.weekStartDate, isSaved)} onClick={() => deleteTimeSheet(state.weekStartDate, setIsSaved)}>\n        Delete Time Sheet From Local Storage\n      </button>\n      <form onSubmit={(evt) => addTimeTable(evt, timeSheetContext, addPersonValue, setAddPersonValue, addPersonInputRef)}>\n        <label htmlFor='person'>\n          Person:\n        </label>\n        <input name='person' type=\"text\" ref={addPersonInputRef} value={addPersonValue} onChange={(evt) => setAddPersonValue(evt.target.value)} />\n        <input type=\"submit\" value=\"Add new timetable\" />\n      </form>\n      {Object.keys(state.timeTablePropsMap).map(personName => (\n      <div className='container' key={personName}>\n        {React.createElement(\n          TimeTable,\n          state.timeTablePropsMap[personName])}\n      </div>))}\n    </TimeSheetContext.Provider>\n  );\n}\n\nfunction initialIsSavedTimeSheet(date: Date) {\n  return existsTimeSheetInLocalStorage(date)\n}\n\nfunction canSaveTimeSheet(date: Date, state: TimeSheetState) {\n  return true\n}\n\nfunction canDeleteTimeSheet(date: Date, isSaved: boolean) {\n  return isSaved\n}\n\nfunction saveTimeSheet(\n    date: Date,\n    state: TimeSheetState,\n    setIsSaved: React.Dispatch<React.SetStateAction<boolean>>) {\n  saveTimeSheetToLocalStorage(date, state)\n  setIsSaved(true)\n}\n\nfunction deleteTimeSheet(\n    date: Date,\n    setIsSaved: React.Dispatch<React.SetStateAction<boolean>>) {\n  deleteTimeSheetFromLocalStorage(date)\n  setIsSaved(false)\n}\n\nfunction addTimeTable(\n    event: FormEvent<HTMLFormElement>,\n    context: TimeSheetContextData,\n    personName: string,\n    setAddPersonValue: React.Dispatch<SetStateAction<string>>,\n    addPersonInputRef: React.MutableRefObject<HTMLInputElement | null>) {\n\n  event.preventDefault()\n\n  if (personName === '') {\n    alert('Cannot add timetable for nameless person')\n    return\n  }\n\n  context.dispatch({\n    type: TimeSheetActionType.AddTimeTable,\n    personName: personName\n  })\n\n  setAddPersonValue(defaultAddPersonValue)\n  addPersonInputRef.current!.focus()\n}\n\nexport default TimeSheet\nexport { TimeSheetContext }\nexport type { TimeSheetContextData, TimeSheetProps }","import React from 'react';\nimport TimeSheet from '../TimeSheet';\nimport { useParams } from 'react-router-dom';\n\ninterface TimeSheetPageParams {\n  date: string\n}\n\nfunction TimeSheetPage() {\n  const pageParams: TimeSheetPageParams = useParams<TimeSheetPageParams>()\n  const date: Date = new Date(pageParams.date)\n\n  return (\n    <section className=\"time-sheet\">\n      <TimeSheet date={date} />\n    </section>\n  );\n}\n\nexport default TimeSheetPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport TimeSheetPage from './pages/TimeSheetPage';\nimport { getSavedTimeSheetDates } from './store/TimeSheetStore';\nimport { addTime, toReadableDateString } from './Utils';\n\nconst baseUrl = '/timesheet-maker'\n\nfunction App() {\n  const savedTimeSheetDates = getSavedTimeSheetDates()\n\n  return (\n    <Router>\n      <>\n        <nav>\n          <ul>\n            <li>\n              <Link to={baseUrl}>Home</Link>\n            </li>\n            {savedTimeSheetDates.sort().map(date => \n            <li key={date.toISOString()}>\n              <Link to={`${baseUrl}/${date.toISOString()}`}>\n                {toReadableDateString(date, true)} – {toReadableDateString(addTime(date, 7), true)}\n              </Link>\n            </li>)}\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path={`${baseUrl}/:date`}>\n            <TimeSheetPage />\n          </Route>\n          <Route path={baseUrl}>\n            <Home />\n          </Route>\n        </Switch>\n      </>\n    </Router>\n    // <section className=\"App\">\n    //   <TimeSheet date={new Date(Date.now())} />\n    // </section>\n  );\n}\n\nexport default App;\nexport { baseUrl } // hack!","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}